[
    {
        "role": "user",
        "content": [
            {
                "type": "text",
                "text": "I am working on Hyper-heuristics for Combinatorial Operation (CO) problem.\nIn this conversation, I will introduce the problem and then framework we have built now, you just remember this.\nIn next conversation, I will describe the challenges I'm encountering and explore how we can collaborate to resolve them.\n\nCurrently, I am working on cvrp problem:\nCapacitated Vehicle Routing Problem (CVRP) is an optimization challenge focused on determining the most efficient routes for a fleet of vehicles to deliver goods to various locations, considering vehicle capacity constraints.\n\nTo support different heuristic algorithms, I build the Solution and Operator framework.\nThe Solution is designed as:\nclass Solution:\n    \"\"\"The solution of CVRP.\nA list of lists where each sublist represents a vehicle's route.\nEach sublist contains integers representing the nodes (customers) visited by the vehicle in the order of visitation.\nThe routes are sorted by vehicle identifier and the nodes in the list sorted by visited order.\"\"\"\n    def __init__(self, routes: list[list[int]], depot: int):\n        self.routes = routes\n        self.depot = depot\nOperator servers as a mechanism to modify solution, which enables the application of heuristic algorithms.\u00a0\nTo support heuristic algorithm, we have build the following operators:\nclass AppendOperator(BaseOperator):\n    \"\"\"Append a node at the end of the specified vehicle's route.\"\"\"\n    def __init__(self, vehicle_id: int, node: int):\n        self.vehicle_id = vehicle_id\n        self.node = node\n    def run(self, solution: Solution) -> Solution:\n        new_routes = [route[:] for route in solution.routes]\n        new_routes[self.vehicle_id].append(self.node)\n        return Solution(new_routes, solution.depot)\nclass InsertOperator(BaseOperator):\n    \"\"\"Insert a node at a specified position within the route of a specified vehicle.\"\"\"\n    def __init__(self, vehicle_id: int, node: int, position: int):\n        self.vehicle_id = vehicle_id\n        self.node = node\n        self.position = position\n    def run(self, solution: Solution) -> Solution:\n        new_routes = [route[:] for route in solution.routes]\n        new_routes[self.vehicle_id].insert(self.position, self.node)\n        return Solution(new_routes, solution.depot)\nclass SwapOperator(BaseOperator):\n    \"\"\"Swap two nodes between or within vehicle routes.\"\"\"\n    def __init__(self, vehicle_id1: int, position1: int, vehicle_id2: int, position2: int):\n        if vehicle_id1 <= vehicle_id2:\n            self.vehicle_id1 = vehicle_id1\n            self.position1 = position1\n            self.vehicle_id2 = vehicle_id2\n            self.position2 = position2\n        else:\n            self.vehicle_id1 = vehicle_id2\n            self.position1 = position2\n            self.vehicle_id2 = vehicle_id1\n            self.position2 = position1\n    def run(self, solution: Solution) -> Solution:\n        new_routes = [route[:] for route in solution.routes]\n        (new_routes[self.vehicle_id1][self.position1], new_routes[self.vehicle_id2][self.position2]) = (new_routes[self.vehicle_id2][self.position2], new_routes[self.vehicle_id1][self.position1])\n        return Solution(new_routes, solution.depot)\nclass ReverseSegmentOperator(BaseOperator):\n    \"\"\"Reverse multiple segments of indices in the solution.\"\"\"\n    def __init__(self, vehicle_id: int, segments: list[tuple[int, int]]):\n        self.vehicle_id = vehicle_id\n        self.segments = segments\n    def run(self, solution: Solution) -> Solution:\n        new_routes = [route[:] for route in solution.routes]\n        new_route = new_routes[self.vehicle_id][:]\n        for segment in self.segments:\n            (start_index, end_index) = segment\n            assert 0 <= start_index < len(new_routes[self.vehicle_id])\n            assert 0 <= end_index < len(new_routes[self.vehicle_id])\n            if start_index <= end_index:\n                new_route[start_index:end_index + 1] = reversed(new_route[start_index:end_index + 1])\n            else:\n                new_route = list(reversed(new_route[start_index:])) + new_route[end_index + 1:start_index] + list(reversed(new_route[:end_index + 1]))\n        new_routes = solution.routes[:self.vehicle_id] + [new_route] + solution.routes[self.vehicle_id + 1:]\n        return Solution(new_routes, solution.depot)\nclass RelocateOperator(BaseOperator):\n    \"\"\"Move a node from one position in a route to another, possibly in a different route.\"\"\"\n    def __init__(self, source_vehicle_id: int, source_position: int, target_vehicle_id: int, target_position: int):\n        self.source_vehicle_id = source_vehicle_id\n        self.source_position = source_position\n        self.target_vehicle_id = target_vehicle_id\n        self.target_position = target_position\n    def run(self, solution: Solution) -> Solution:\n        new_routes = [route[:] for route in solution.routes]\n        node = new_routes[self.source_vehicle_id].pop(self.source_position)\n        if not new_routes[self.target_vehicle_id]:\n            new_routes[self.target_vehicle_id].append(node)\n        else:\n            new_routes[self.target_vehicle_id].insert(self.target_position, node)\n        return Solution(new_routes, solution.depot)\nclass MergeRoutesOperator(BaseOperator):\n    \"\"\"Merge two routes by appending the route of the source vehicle to the beginning of the route of the target vehicle. \nThe merged route is assigned to the target vehicle, and the source vehicle's route is cleared.\"\"\"\n    def __init__(self, source_vehicle_id: int, target_vehicle_id: int):\n        self.source_vehicle_id = source_vehicle_id\n        self.target_vehicle_id = target_vehicle_id\n    def run(self, solution: Solution) -> Solution:\n        new_routes = [route[:] for route in solution.routes]\n        new_routes[self.target_vehicle_id] = new_routes[self.source_vehicle_id] + new_routes[self.target_vehicle_id]\n        new_routes[self.source_vehicle_id] = []\n        return Solution(new_routes, solution.depot)\n\nIn pursuit of augmenting our heuristic algorithmic suite, we require the following standardized heuristic function signature:\ndef heuristic(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: call, **kwargs) -> tuple[TargetOperatorType, dict]:\nThe inputs are:\nglobal_data (dict): The global data dict containing the global instance data with:\n    - \"node_num\" (int): The total number of nodes in the problem.\n    - \"distance_matrix\" (numpy.ndarray): A 2D array representing the distances between nodes.\n    - \"vehicle_num\" (int): The total number of vehicles.\n    - \"capacity\" (int): The capacity for each vehicle and all vehicles share the same value.\n    - \"depot\" (int): The index for depot node.\n    - \"demands\" (numpy.ndarray): The demand of each node.\nstate_data (dict): The state data dict containing the solution state data with:\n    - \"current_solution\" (Solution): The current set of routes for all vehicles.\n    - \"visited_nodes\" (list[int]): A list of lists representing the nodes visited by each vehicle.\n    - \"visited_num\" (int): Number of nodes visited by each vehicle.\n    - \"unvisited_nodes\" (list[int]): Nodes that have not yet been visited by any vehicle.\n    - \"visited_num\" (int): Number of nodes have not been visited by each vehicle.\n    - \"total_current_cost\" (int): The total cost of the current solution.\n    - \"last_visited\" (list[int]): The last visited node for each vehicle.\n    - \"vehicle_loads\" (list[int]): The current load of each vehicle.\n    - \"vehicle_remaining_capacity\" (list[int]): The remaining capacity for each vehicle.\n    - \"validation_solution\" (callable): def validation_solution(solution: Solution) -> bool: function to check whether new solution is valid.\nalgorithm_data(dict): Algorithm data contains the data that necessary for some algorithms.\nget_state_data_function(callable): The get_state_data_function is the function that receives the new solution as input and return the state dictionary for new solution. It will not modify the origin solution.\nOther hyper-parameters in kwargs.\nThe outputs includes the operator that must be an instance of a predefined target operator type and updated algorithm dict, which contains new information for future work for both this or other algorithm.\n\nPlease consider is cvrp a combinatorial operation problem and can be solved by heuristics?\nIf you think this problem is not a combinatorial operation problem or the solution, operator, data are incorrect, response ***is_cop:no*** to me, or response ***is_cop:yes***.\n\nThe response format is very important. For better communication, please respond to me in this format:\n***is_cop:yes/no***\nEnsure there is no other content inside the ***, and analysis outside *** are welcome.\nIf you have no information to provide, simply respond with ***None***."
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "type": "text",
                "text": "***is_cop:yes***\n\nThe Capacitated Vehicle Routing Problem (CVRP) is indeed a combinatorial optimization problem (COP). It involves finding the most efficient way to route vehicles to meet constraints such as vehicle capacities and minimizing the total distance or cost. Heuristics are a well-established approach for solving COPs like CVRP, especially given their NP-hard nature. Your framework for solutions, operators, and standardized heuristic function signatures aligns well with the structure of a COP and is appropriate for heuristic-based methods."
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "type": "text",
                "text": "We have already implement the following heuristics.\nThese are the heuristics inb format: heuristic_name(parameter=default_value, ..): introduction\ndef farthest_insertion_6308(): Farthest Insertion Heuristic Algorithm with Improvements for the Capacitated Vehicle Routing Problem (CVRP). This heuristic algorithm selects unvisited nodes based on a scoring mechanism that considers insertion cost, route compactness, and vehicle capacity utilization. It periodically performs greedy improvements and inter-vehicle swaps to enhance the solution.\ndef min_cost_insertion_3b2b(): Optimized Min-Cost Insertion Heuristic for CVRP. This heuristic algorithm is optimized for performance by restructuring the order of operations, adjusting hyper-parameters, and implementing efficient logic to enhance the solution.\ndef nearest_neighbor_54a9(): Enhanced Nearest Neighbor Heuristic for CVRP. This heuristic prioritizes nodes with higher demands that can fit into the vehicle's remaining capacity, especially when the number of unvisited nodes is low. It also periodically applies a 2-opt heuristic to improve route compactness.\ndef saving_algorithm_710e(merge_threshold: float = 0.0): Saving Algorithm heuristic for CVRP. Calculates savings for combining two routes into one for each pair of end nodes of existing routes and sorts these savings in descending order. Routes are then merged by the highest savings while considering vehicle capacity constraints.\ndef three_opt_e8d7(): Implements a 3-opt heuristic algorithm for the Capacitated Vehicle Routing Problem (CVRP).\ndef two_opt_0554(): Implements a 2-opt heuristic algorithm for the Capacitated Vehicle Routing Problem (CVRP).\n\nBefore we solve the actual problem, please try to analysis the scenarios where each algorithm is applicable, and these scenarios are best quantified.\n"
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "type": "text",
                "text": "To analyze the applicability of each heuristic algorithm, we must consider the characteristics of the problem instance, such as problem size, demand distribution, depot and customer location, and vehicle constraints. Here\u2019s the analysis for each heuristic and the scenarios in which they are best applicable:\n\n---\n\n### **1. Farthest Insertion Heuristic (`farthest_insertion_6308`)**\n#### **Scenario:**\n- **Sparse and widely distributed nodes**: This heuristic is effective when nodes are far apart because it considers farthest nodes for insertion, ensuring that distant locations are connected efficiently.\n- **High vehicle utilization desired**: The scoring mechanism that incorporates capacity utilization can improve solutions where high vehicle utilization is critical.\n- **Moderate number of nodes and vehicles**: Works well when there is sufficient computation time to calculate improved routes iteratively.\n#### **Quantification:**\n- **Node distribution**: Works best when the average inter-node distance is high (e.g., mean inter-node distance > 10% of the maximum distance in the distance matrix).\n- **Problem size**: Suitable for medium-sized problems (e.g., 50\u2013150 nodes).\n\n---\n\n### **2. Optimized Min-Cost Insertion (`min_cost_insertion_3b2b`)**\n#### **Scenario:**\n- **Dense and clustered nodes**: This heuristic excels when nodes are closer together, as it minimizes insertion costs for compact routes.\n- **Small to medium-sized problems**: Faster than more complex heuristics, making it ideal for problems with fewer nodes or when a quick solution is required.\n- **Uniform demand distribution**: Works best when demands are evenly distributed among nodes.\n#### **Quantification:**\n- **Node clustering**: Effective when the standard deviation of inter-node distances is low (e.g., < 20% of the mean distance).\n- **Problem size**: Suitable for small to medium-sized problems (e.g., 20\u2013100 nodes).\n\n---\n\n### **3. Enhanced Nearest Neighbor (`nearest_neighbor_54a9`)**\n#### **Scenario:**\n- **Simple initial solution**: This heuristic is often used to create a quick, feasible initial solution that can be improved with other methods (e.g., 2-opt or 3-opt).\n- **Low computational budget**: Fast and computationally efficient, making it ideal for solving large problems quickly.\n- **High demand variability**: Prioritizing high-demand nodes ensures that vehicles are effectively utilized.\n#### **Quantification:**\n- **Problem size**: Suitable for large problems (e.g., 100\u2013500 nodes) where speed is prioritized over solution quality.\n- **Demand variability**: Works well when the coefficient of variation (CV) of node demands is high (e.g., CV > 0.3).\n\n---\n\n### **4. Saving Algorithm (`saving_algorithm_710e`)**\n#### **Scenario:**\n- **High merge opportunities**: Effective when there are many opportunities to merge routes, such as when nodes are clustered around the depot or along shared paths.\n- **Merge threshold tuning**: The `merge_threshold` parameter can be adjusted to control the trade-off between solution quality and computational efficiency.\n- **Moderate to large problems**: Scales well with an increase in the number of nodes.\n#### **Quantification:**\n- **Node clustering relative to depot**: Best when a significant proportion of nodes (e.g., > 50%) are within a certain distance from the depot (e.g., 20% of the maximum distance).\n- **Problem size**: Suitable for medium to large problems (e.g., 50\u2013300 nodes).\n- **Merge threshold**: Lower thresholds (e.g., 0\u20130.2) are better for tighter capacity constraints.\n\n---\n\n### **5. 3-opt Heuristic (`three_opt_e8d7`)**\n#### **Scenario:**\n- **High-quality solution refinement**: 3-opt is a local search heuristic that is computationally intensive but produces high-quality solutions by exploring multiple route rearrangements.\n- **Final solution improvement**: Best applied after an initial solution has been generated by a simpler heuristic (e.g., nearest neighbor or saving algorithm).\n- **Small to medium-sized problems**: Due to its computational complexity, it is better suited for smaller problem sizes.\n#### **Quantification:**\n- **Problem size**: Suitable for small to medium problems (e.g., 20\u2013150 nodes).\n- **Solution refinement**: Best when the initial solution has a total cost within 20\u201330% of the estimated optimal solution.\n\n---\n\n### **6. 2-opt Heuristic (`two_opt_0554`)**\n#### **Scenario:**\n- **Route compactness improvement**: 2-opt works well for improving route compactness by eliminating unnecessary route crossings.\n- **Medium computational budget**: Faster than 3-opt, making it suitable for larger problems or when computational time is limited.\n- **Initial solution improvement**: Like 3-opt, it is often applied after generating an initial solution.\n#### **Quantification:**\n- **Problem size**: Suitable for medium-sized to large problems (e.g., 50\u2013300 nodes).\n- **Solution refinement**: Best when the initial solution has a total cost within 30\u201340% of the estimated optimal solution.\n\n---\n\n### **Summary of Applicability**\n| **Heuristic**           | **Best for Problem Size** | **Node Distribution**             | **Demand Variability** | **Purpose**                     |\n|--------------------------|---------------------------|------------------------------------|-------------------------|----------------------------------|\n| farthest_insertion_6308  | Medium                   | Sparse and widely distributed      | Moderate               | High vehicle utilization        |\n| min_cost_insertion_3b2b  | Small to medium          | Dense and clustered               | Uniform                | Efficient initial solution      |\n| nearest_neighbor_54a9    | Large                    | Any                                | High                   | Quick initial solution          |\n| saving_algorithm_710e    | Medium to large          | Clustered around depot            | Any                    | Merge routes efficiently         |\n| three_opt_e8d7           | Small to medium          | Any                                | Any                    | High-quality solution refinement|\n| two_opt_0554             | Medium to large          | Any                                | Any                    | Route compactness improvement   |\n\n---\n\n### **Key Insights**\n1. **Initial Solution Heuristics**: Nearest Neighbor and Min-Cost Insertion are excellent for generating initial solutions quickly.\n2. **Refinement Heuristics**: 2-opt and 3-opt are ideal for improving initial solutions, with 2-opt being faster and 3-opt providing higher quality.\n3. **Specialized Heuristics**: Farthest Insertion and Saving Algorithm are more scenario-specific, excelling in cases where node distribution or merging opportunities are unique.\n\nBy understanding the problem characteristics, you can strategically combine these heuristics to achieve high-quality solutions while balancing computational efficiency."
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "type": "text",
                "text": "The global data with some heuristic values for this problem:\nnode_num:200\nvehicle_num:17\ncapacity:200\ndepot:0\ndemands:[0, 10, 7, 13, 19, 26, 3, 5, 9, 16, 16, 12, 19, 23, 20, 8, 19, 2, 12, 17, 9, 11, 18, 29, 3, 6, 17, 16, 16, 9, 21, 27, 23, 11, 14, 8, 5, 8, 16, 31, 9, 5, 5, 7, 18, 16, 1, 27, 36, 30, 13, 10, 9, 14, 18, 2, 6, 7, 18, 28, 3, 13, 19, 10, 9, 20, 25, 25, 36, 6, 5, 15, 25, 9, 8, 18, 13, 14, 3, 23, 6, 26, 16, 11, 7, 41, 35, 26, 9, 15, 3, 1, 2, 22, 27, 20, 11, 12, 10, 9, 17, 7, 30, 16, 9, 21, 15, 19, 23, 11, 5, 19, 29, 23, 21, 10, 15, 3, 41, 9, 28, 8, 8, 16, 10, 28, 7, 15, 14, 6, 19, 11, 12, 23, 26, 17, 6, 9, 15, 14, 7, 27, 13, 11, 16, 10, 5, 25, 17, 18, 10, 18, 26, 11, 30, 21, 19, 15, 16, 29, 26, 37, 16, 12, 31, 8, 19, 20, 13, 15, 22, 28, 12, 6, 27, 14, 18, 17, 29, 13, 22, 25, 28, 27, 19, 10, 12, 14, 24, 16, 33, 15, 11, 18, 17, 21, 27, 19, 20, 5]\naverage_demand:15.93\ndemand_variance:72.8951\naverage_distance:32.878492462311556\nmax_distance:92.0\nmin_distance:0.0\ndistance_variance:247.4855374258226\nvehicle_capacity_utilization:0.9370588235294117\nnode_to_vehicle_ratio:11.764705882352942\nNote: Some data are omitted due to space constraints.\n\nThe state data some heuristic values for current stage:\ncurrent_solution:\nvehicle_0: 0->156->112->6->96->59->92->85->93->104->99->94->0\nvehicle_1: 0->146->28->154->138->26->180->40->152->58->105->53->0\nvehicle_2: 0->111->176->1->132->69->162->167->27->0\nvehicle_3: 0->0\nvehicle_4: 0->0\nvehicle_5: 0->0\nvehicle_6: 0->0\nvehicle_7: 0->0\nvehicle_8: 0->0\nvehicle_9: 0->0\nvehicle_10: 0->0\nvehicle_11: 0->0\nvehicle_12: 0->0\nvehicle_13: 0->0\nvehicle_14: 0->0\nvehicle_15: 0->0\nvehicle_16: 0->0\n\nvisited_nodes:[0, 1, 132, 6, 138, 146, 152, 26, 154, 28, 156, 27, 162, 167, 40, 176, 180, 53, 58, 59, 69, 85, 92, 93, 94, 96, 99, 104, 105, 111, 112]\nvisited_num:31\nunvisited_nodes:[2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 95, 97, 98, 100, 101, 102, 103, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\nunvisited_num:169\ntotal_current_cost:139.0\nlast_visited:[94, 53, 27, 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None']\nvehicle_loads:[200, 193, 117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nvehicle_remaining_capacity:[0, 7, 83, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200]\naverage_route_length:1.7647058823529411\nmax_route_length:11\nmin_route_length:0\nstd_dev_route_length:3.8582137251309607\naverage_route_cost:34.0\ntotal_demand_served:510\naverage_vehicle_load:30.0\naverage_remaining_vehicle_capacity:170.0\nnumber_of_unvisited_nodes:169\naverage_unvisited_node_demand:15.834319526627219\ntotal_remaining_demand:2676\nsolution_validity:True\nNote: Some data are omitted due to space constraints.\n\nBefore this discuss, we have already 3 rounds discuss and the summary are:\n---Round 0---\nHeuristic: nearest_neighbor_54a9\nParameters: {}\nRunning Steps: 10\nExplain: The current state indicates that no nodes have been visited (except the depot), and the solution is at its initial stage. Nearest Neighbor is computationally efficient and well-suited for generating an initial feasible solution by quickly assigning nodes to routes. Given the high number of unvisited nodes (199), this heuristic will help construct a basic solution. The 10 steps will allow us to evaluate its effectiveness before deciding to continue or switch to another heuristic.\nDelta of Visited Node Num: 10\nDelta of Current Cost: 47.0\nDelta of Fulfilled Demands: 198\n---Round 1---\nHeuristic: nearest_neighbor_54a9\nParameters: {}\nRunning Steps: 10\nExplain: The current state still has a high number of unvisited nodes (189), and the initial application of `nearest_neighbor_54a9` performed well by visiting 10 nodes with a reasonable cost increase of 47.0 while serving 198 demands. This heuristic remains efficient at this stage for further constructing the solution, given its ability to quickly assign unvisited nodes to routes. Running another 10 steps will help expand the solution and allow us to better evaluate the overall progress before considering switching to refinement-focused heuristics.\nDelta of Visited Node Num: 10\nDelta of Current Cost: 42.0\nDelta of Fulfilled Demands: 164\n---Round 2---\nHeuristic: nearest_neighbor_54a9\nParameters: {}\nRunning Steps: 10\nExplain: The current state still indicates a high number of unvisited nodes (179), and `nearest_neighbor_54a9` has demonstrated good performance in the previous two rounds, visiting 10 nodes at a reasonable cost increment while fulfilling significant demand. Given the computational efficiency of this heuristic and its ability to construct the solution further, running another 10 steps is appropriate to continue building the solution. This will provide more progress before assessing whether a switch to refinement heuristics, such as 2-opt or 3-opt, is necessary.\nDelta of Visited Node Num: 10\nDelta of Current Cost: 50.0\nDelta of Fulfilled Demands: 148\n\nConsiderations for Next Steps\n- Is the current data sufficient for decision-making?\n- Is there a need to construct or refine the solution further?\n- The last heuristic is: nearest_neighbor_54a9. How does nearest_neighbor_54a9 perform, and should we continue with it?\n- How much steps should we run for next heuristic?\n\nDecision Options:\nWe aim to incrementally construct an optimal solution by strategically applying a set of heuristic algorithms. Each heuristic, when applied, contributes one operator to the evolving solution. Here is the refined process:\n1. I will present you with the initial data. Your role will be to evaluate this data and select the most appropriate heuristic algorithm from our pool of heuristics. This selection will be based on predefined criteria and heuristic performance measures.\n2. I will then execute the chosen heuristic for a number of steps, resulting in a partial solution. Once this stage is complete, I will provide you with the updated solution state. Your task will be to assess the progress and determine whether to:\n    - Continue with the same heuristic algorithm to further develop the current solution, or\n    - Switch to a different heuristic algorithm from our pool to either enhance the existing solution or take a new approach to the problem.\n\nAs the selection hyper-heuristic algorithm agent, your role is critical in orchestrating the application of these heuristics to navigate towards an improved or final solution. Please familiarize yourself with the available heuristic algorithms and the overall decision-making pipeline. Once I introduce the specific data for our problem, we will collaborate to advance towards the solution.\n\nThe response format is very important. For better communication, please respond to me in this format:\n1. If you believe the we should continue to build or improve solution, please respond to me in this format:\n***Run heuristic:\nselected heuristic: heuristic_name\nrunning steps: N\nhype parameter(optional): a=xx;b=xx\nexplanation: xxx\n***\n2. If you think the solution can not be improved, please respond to me in this format:\n***Stop***\n"
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "type": "text",
                "text": "***Run heuristic:\nselected heuristic: nearest_neighbor_54a9\nrunning steps: 10\nexplanation: The current state still indicates a high number of unvisited nodes (169), and `nearest_neighbor_54a9` has performed well in the previous rounds, consistently visiting nodes with reasonable cost increments while fulfilling significant demand. Given its computational efficiency and ability to further construct the solution, running another 10 steps is appropriate to continue building the solution. This will help reduce the number of unvisited nodes and provide more progress before considering refinement-focused heuristics like 2-opt or 3-opt.\n***"
            }
        ]
    }
]