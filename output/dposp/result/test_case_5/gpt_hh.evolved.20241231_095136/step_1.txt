user
I am working on Hyper-heuristics for Combinatorial Operation (CO) problem.
In this conversation, I will introduce the problem and then framework we have built now, you just remember this.
In next conversation, I will describe the challenges I'm encountering and explore how we can collaborate to resolve them.

Currently, I am working on dposp problem:
Dynamic Production Order Scheduling Problem (DPOSP) involves multiple machines, each capable of producing various products. The production speed for different products varies across machines, and some transitions between products are not allowed. Each order specifies the required product, quantity, and deadline, and an order is considered completed only if all requirements are met by the deadline. Orders completed after the deadline are invalid. Each production action corresponds to an order, and the plan for each production line can be represented as a list, where each item denotes an order. The start time of each production is calculated based on the sum of the previous production and transition times, ensuring that each production is completed before the deadline. Our objective is to maximize the number of completed orders, with each order having the same priority, regardless of the quantity required.

To formally describe DPOSP, we build the following optimization model. Let X_ij represent the j-th production action on the i-th production line, whereX_ij=k indicates that the j-th action on the i-th production line is producing order k, and X_ij=0 if there is no production action. The problem includes the following components:

**Maximize**
Sum over all production lines (i) and production actions (j) of the indicator function I(X_ij != 0)

**Subject to**
1. For each order k, sum over all production lines (i) and production actions (j) of the indicator function I(X_ij = k) <= 1.
2. The start time s_ij is set to:
   - 0 if j = 1 (the first action on the production line starts at time 0)
   - The end time of the previous action (e_i,j-1) plus the transition time between the products of the previous action (P_k_j-1) and the current action (P_k_j) if j > 1.
3. The end time e_ij is calculated as the start time s_ij plus the quantity of order k divided by the production speed of the production line i for product P_k, if X_ij = k.
4. The end time e_ij must be less than or equal to the deadline D_k for the order k, if X_ij = k.

Where:
- X_ij (Decision Variable) represents the j-th production action on the i-th production line, with X_ij = k indicating production of order k and X_ij = 0 indicating no action; X_ij can take values in the set {0, 1, ..., k}.
- v_ip (Input Variable) is the production speed of production line i for product p. If v_ip = 0, the product cannot be produced on line i.
- t_i,p,p' (Input Variable) is the transition time for production line i from product p to product p'. If t_i,p,p' is infinity, the transition is not allowed.
- Q_k (Input Variable) is the quantity required for order k.
- P_k (Input Variable) is the product required for order k.
- D_k (Input Variable) is the deadline for order k.
- s_ij (Intermediate Variable) is the start time of the j-th production action on production line i.
- e_ij (Intermediate Variable) is the end time of the j-th production action on production line i.
- I() (Indicator Function) equals 1 if the condition is true, and 0 otherwise.


To support different heuristic algorithms, I build the Solution and Operator framework.
The Solution is designed as:
class Solution:
    """The solution of DPOSP.
A list of lists, where each sublist corresponds to a production line's planned sequence of orders.
Each integer within the sublist represents an order to be fulfilled by the machine, in the sequence they are to be produced."""
    def __init__(self, production_schedule: list[list[int]]):
        self.production_schedule = production_schedule
Operator servers as a mechanism to modify solution, which enables the application of heuristic algorithms.Â 
To support heuristic algorithm, we have build the following operators:
class AppendOperator(BaseOperator):
    """Appends an order to the end of a specified production line's schedule."""
    def __init__(self, production_line_id: int, order_id: int):
        self.production_line_id = production_line_id
        self.order_id = order_id
    def run(self, solution: Solution) -> Solution:
        new_schedule = [order[:] for order in solution.production_schedule]
        new_schedule[self.production_line_id].append(self.order_id)
        return Solution(new_schedule)
class InsertOperator(BaseOperator):
    """Inserts an order at a specified position within a production line's schedule."""
    def __init__(self, production_line_id: int, order_id: int, position: int):
        self.production_line_id = production_line_id
        self.order_id = order_id
        self.position = position
    def run(self, solution: Solution) -> Solution:
        new_schedule = [order[:] for order in solution.production_schedule]
        new_schedule[self.production_line_id].insert(self.position, self.order_id)
        return Solution(new_schedule)
class SwapOperator(BaseOperator):
    """Swaps two orders between or within production lines."""
    def __init__(self, production_line_id1: int, position1: int, production_line_id2: int, position2: int):
        if production_line_id1 <= production_line_id2:
            self.production_line_id1 = production_line_id1
            self.position1 = position1
            self.production_line_id2 = production_line_id2
            self.position2 = position2
        else:
            self.production_line_id1 = production_line_id2
            self.position1 = position2
            self.production_line_id2 = production_line_id1
            self.position2 = position1
    def run(self, solution: Solution) -> Solution:
        new_schedule = [order[:] for order in solution.production_schedule]
        (new_schedule[self.production_line_id1][self.position1], new_schedule[self.production_line_id2][self.position2]) = (new_schedule[self.production_line_id2][self.position2], new_schedule[self.production_line_id1][self.position1])
        return Solution(new_schedule)
class ReverseSegmentOperator(BaseOperator):
    """Reverses a segment of orders within a production line's schedule."""
    def __init__(self, production_line_id: int, segments: list[tuple[int, int]]):
        self.production_line_id = production_line_id
        self.segments = segments
    def run(self, solution: Solution) -> Solution:
        new_schedule = [order[:] for order in solution.production_schedule]
        for segment in self.segments:
            (start_index, end_index) = segment
            assert 0 <= start_index < len(new_schedule[self.production_line_id])
            assert 0 <= end_index < len(new_schedule[self.production_line_id])
            if start_index > end_index:
                (start_index, end_index) = (end_index, start_index)
            new_schedule[self.production_line_id][start_index:end_index + 1] = reversed(new_schedule[self.production_line_id][start_index:end_index + 1])
        return Solution(new_schedule)
class RelocateOperator(BaseOperator):
    """Moves an order from one position to another within the same or to a different production line."""
    def __init__(self, source_production_line_id: int, source_position: int, target_production_line_id: int, target_position: int):
        self.source_production_line_id = source_production_line_id
        self.source_position = source_position
        self.target_production_line_id = target_production_line_id
        self.target_position = target_position
    def run(self, solution: Solution) -> Solution:
        new_schedule = [order[:] for order in solution.production_schedule]
        order = new_schedule[self.source_production_line_id].pop(self.source_position)
        if not new_schedule[self.target_production_line_id]:
            new_schedule[self.target_production_line_id].append(order)
        else:
            new_schedule[self.target_production_line_id].insert(self.target_position, order)
        return Solution(new_schedule)
class MergeOperator(BaseOperator):
    """Merges the schedule of a source production line into the beginning of a target production line's schedule. 
The merged schedule is assigned to the target production line, and the source production line's schedule is cleared."""
    def __init__(self, source_production_line_id: int, target_production_line_id: int):
        self.source_production_line_id = source_production_line_id
        self.target_production_line_id = target_production_line_id
    def run(self, solution: Solution) -> Solution:
        new_schedule = [order[:] for order in solution.production_schedule]
        new_schedule[self.target_production_line_id] = new_schedule[self.source_production_line_id] + new_schedule[self.target_production_line_id]
        new_schedule[self.source_production_line_id] = []
        return Solution(new_schedule)

In pursuit of augmenting our heuristic algorithmic suite, we require the following standardized heuristic function signature:
def heuristic(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: call, **kwargs) -> tuple[TargetOperatorType, dict]:
The inputs are:
- "product_num" (int): Total number of unique products.
- "production_line_num" (int): Total number of production lines.
- "order_num" (int): Total number of orders to be scheduled.
- "production_rate" (numpy.array): 2D array of production time for each product on each production line, and shape is (production_line_num, product_num)
- "transition_time" (numpy.array): 3D array of transition time between products on each production line, and shape is (production_line_num, product_num, product_num)
- "order_product" (numpy.array): 1D array mapping each order to its required product and length is order_num.
- "order_quantity" (numpy.array): 1D array of the quantity required for each order and length is order_num.
- "order_deadline" (numpy.array): 1D array of the deadline for each order and length is order_num.
- "current_solution" (Solution): Current scheduling solution.
- "fulfilled_order_num" (int): Number of fulfilled orders.
- "fulfilled_orders" (list[int]): List of fulfilled orders.
- "unfulfilled_orders" (list[int]): List of unfulfilled orders.
- "total_time_cost_per_production_line" (numpy.array): 1D array of the sum of production and transition times for each production line.
- "feasible_orders_to_fulfill" (list): The feasible orders that can be fulfilled based on the current solution without delaying other planned orders.
- "validation_single_production_schedule" (callable): def validation_single_production_schedule(production_line_id: int, production_schedule: list[int]) -> bool: function to check whether the production schedule is valid.
- "get_time_cost_delta" (callable): def get_time_cost_delta(production_line_id: int, order_id: int, position: int, solution: Solution=None) -> float: function to get the time cost for following order after insert in this solution. solution can be omitted if using current solution.
- "validation_solution" (callable): def validation_solution(solution: Solution) -> bool: function to check whether new solution is valid.
algorithm_data(dict): Algorithm data contains the data that necessary for some algorithms.
get_state_data_function(callable): The get_state_data_function is the function that receives the new solution as input and return the state dictionary for new solution. It will not modify the origin solution.
Other hyper-parameters in kwargs.
The outputs includes the operator that must be an instance of a predefined target operator type and updated algorithm dict, which contains new information for future work for both this or other algorithm.

Please consider is dposp a combinatorial operation problem and can be solved by heuristics?
If you think this problem is not a combinatorial operation problem or the solution, operator, data are incorrect, response ***is_cop:no*** to me, or response ***is_cop:yes***.

The response format is very important. For better communication, please respond to me in this format:
***is_cop:yes/no***
Ensure there is no other content inside the ***, and analysis outside *** are welcome.
If you have no information to provide, simply respond with ***None***.
------------------------------------------------------------------------------------

assistant
***is_cop:yes***
------------------------------------------------------------------------------------

user
We have already implement the following heuristics.
These are the heuristics inb format: heuristic_name(parameter=default_value, ..): introduction
def exchange_production_orders_eda2(): The exchange production orders heuristic tries to improve the current production schedule by swapping two non-adjacent orders from the same or different production lines and assessing the impact on the total production and transition times. The heuristic is based on the 2-opt approach from TSP and is adapted to consider DPOSP-specific constraints such as varying production speeds, transition times, order deadlines, and production line capabilities.
def greedy_by_order_density_de77(): Heuristic to prioritize orders based on a weighted combination of deadline tightness, production feasibility, and potential flexibility for future scheduling.
def least_order_remaining_27ca(): Heuristic to prioritize orders based on a weighted score incorporating deadline proximity, production feasibility, and potential to maximize fulfilled orders.
def order_shift_between_lines_bd0c(): This heuristic attempts to shift an unfulfilled order from one production line to another while adhering to machine capabilities, transition rules, and order deadlines.
def shortest_operation_ae31(): Shortest Operation Heuristic with Optimization (AE31) for DPOSP. This heuristic aims to maximize the number of fulfilled orders by prioritizing orders based on deadlines, feasibility, and production times. It dynamically searches for better insertion positions, shifts orders, and periodically optimizes through swaps.
def _2opt_production_sequence_8e5e(): The 2-opt Production Sequence heuristic adapts the 2-opt approach from TSP to the context of DPOSP. It aims to improve the sequence of production orders on each production line by swapping two non-adjacent orders and re-evaluating the schedule's efficiency. By considering the production rates, transition times, and order deadlines, this heuristic explores alternative sequences that could lead to a higher number of completed orders or reduced total production and transition time. The heuristic iteratively checks all possible pairs of non-adjacent orders within a production line to determine if a more optimal order sequence can be found, taking care to maintain the feasibility of the schedule with respect to order deadlines. If a more efficient sequence is identified, the heuristic generates a ReverseSegmentOperator that applies this improved order sequence to the production line.

Before we solve the actual problem, please try to analysis the scenarios where each algorithm is applicable, and these scenarios are best quantified.

------------------------------------------------------------------------------------

assistant
To analyze the scenarios where each algorithm is applicable and best quantified, let's break down the characteristics of the provided heuristics and map them to specific problem scenarios. We'll also identify the best metrics to quantify their performance in these scenarios.

---

### **1. `exchange_production_orders_eda2()`**
#### **Scenario:**
- **High complexity in transition times:** When the problem involves costly transitions between products or when different orders have varying transition times across production lines.
- **Optimization of local sequences:** Useful when the current solution is valid but has room for improvement in terms of production and transition time efficiency.
- **Large number of orders and production lines:** As this heuristic performs swaps, it is particularly effective in fine-tuning large solutions.

#### **Best Quantified By:**
- **Reduction in total transition time** after the swaps.
- **Increase in the number of fulfilled orders** after applying the heuristic.
- **Improvement in schedule feasibility metrics**, such as reducing deadline violations.

---

### **2. `greedy_by_order_density_de77()`**
#### **Scenario:**
- **Limited production capacity:** When machines or lines cannot handle all orders, and prioritization is key to maximizing fulfilled orders.
- **Tight deadlines:** Orders with stricter deadlines need to be scheduled earlier.
- **High variability in order characteristics:** When there is significant variation in order quantities, deadlines, and production feasibility.

#### **Best Quantified By:**
- **Weighted priority score** based on order density and deadlines.
- **Number of high-priority orders fulfilled.**
- **Reduction in unfulfilled orders**, especially those with tight deadlines.

---

### **3. `least_order_remaining_27ca()`**
#### **Scenario:**
- **Backlog of orders:** When there are many unfulfilled orders, and prioritization can focus on maximizing throughput.
- **Focus on late orders:** Orders that are close to or already nearing deadlines are given priority.
- **High-order count but limited flexibility:** This heuristic is effective in scenarios where production lines are near capacity and require small adjustments.

#### **Best Quantified By:**
- **Increase in the number of fulfilled orders.**
- **Reduction in orders with imminent deadlines** that remain unfulfilled.
- **Improvement in overall solution feasibility** by fulfilling orders that were previously deemed infeasible.

---

### **4. `order_shift_between_lines_bd0c()`**
#### **Scenario:**
- **Imbalanced production lines:** When some production lines are overloaded while others are underutilized.
- **Infeasible orders on specific lines:** Orders that cannot be produced on one line due to machine limitations but could be moved to another line.
- **Dynamic reallocation requirement:** Useful in dynamic environments where order priorities or machine capabilities change frequently.

#### **Best Quantified By:**
- **Reduction in imbalance between production lines**, measured as the standard deviation of total production time across lines.
- **Increase in the number of fulfilled orders** by reallocating infeasible orders.
- **Reduction in unutilized production capacity** across production lines.

---

### **5. `shortest_operation_ae31()`**
#### **Scenario:**
- **High variability in order production times:** When orders have drastically different production times, this heuristic ensures that shorter operations are prioritized.
- **Tight deadlines with flexible insertion points:** Useful when the schedule has gaps that can be filled with short operations without delaying existing orders.
- **Dynamic environments:** Works well in scenarios where the schedule needs continuous adjustments to accommodate new orders or changing deadlines.

#### **Best Quantified By:**
- **Increase in the number of fulfilled orders**, particularly for short-duration orders.
- **Reduction in gaps or idle times** within production schedules.
- **Improvement in overall schedule efficiency**, measured as the ratio of fulfilled orders to total orders.

---

### **6. `_2opt_production_sequence_8e5e()`**
#### **Scenario:**
- **Suboptimal order sequences:** When the current production schedule is feasible but inefficient due to poor sequencing of orders.
- **Focus on local optimization:** Effective for fine-tuning within a single production line or across small subsets of orders.
- **High transition costs:** Particularly useful when transition times significantly impact overall efficiency.

#### **Best Quantified By:**
- **Reduction in total production and transition time.**
- **Increase in the number of fulfilled orders** after reordering.
- **Improvement in sequence efficiency**, measured by a decrease in the makespan (total time required to complete all scheduled orders).

---

### **Summary Table**

| **Heuristic**                     | **Scenario**                                      | **Best Quantified By**                                                                                  |
|------------------------------------|--------------------------------------------------|---------------------------------------------------------------------------------------------------------|
| `exchange_production_orders_eda2` | High transition complexity, large solutions      | Reduction in transition time, increase in fulfilled orders, improvement in feasibility metrics         |
| `greedy_by_order_density_de77`    | Limited capacity, tight deadlines                | Weighted priority score, high-priority orders fulfilled, reduction in unfulfilled orders               |
| `least_order_remaining_27ca`      | Backlog of orders, focus on late orders          | Increase in fulfilled orders, reduction in imminent deadline violations, improvement in feasibility    |
| `order_shift_between_lines_bd0c`  | Imbalanced production lines, infeasible orders   | Reduction in line imbalance, increase in fulfilled orders, reduction in unutilized capacity            |
| `shortest_operation_ae31`         | High variability in production times, tight gaps | Increase in fulfilled orders, reduction in idle time, improved schedule efficiency                     |
| `_2opt_production_sequence_8e5e`  | Suboptimal sequences, high transition costs      | Reduction in production/transition time, increase in fulfilled orders, improvement in sequence efficiency |

---

### **General Observations:**
1. **Dynamic Environments:** Heuristics like `shortest_operation_ae31` and `order_shift_between_lines_bd0c` are more adaptable to dynamic problems where schedules need frequent adjustments.
2. **Static Optimization:** Heuristics like `exchange_production_orders_eda2` and `_2opt_production_sequence_8e5e` are better suited for refining static schedules.
3. **Prioritization-Based:** Heuristics like `greedy_by_order_density_de77` and `least_order_remaining_27ca` focus on prioritizing orders and are useful in capacity-constrained environments.

This analysis provides a roadmap for selecting heuristics based on the specific characteristics of the DPOSP instance being solved.
------------------------------------------------------------------------------------

user
The global data with some heuristic values for this problem:
product_num:20
production_line_num:10
order_num:200
order_product:[3, 13, 10, 13, 15, 12, 11, 5, 10, 12, 4, 11, 15, 9, 3, 8, 2, 13, 14, 9, 0, 4, 4, 15, 18, 7, 1, 14, 8, 19, 0, 5, 11, 16, 0, 4, 19, 7, 4, 2, 16, 17, 18, 12, 16, 17, 9, 8, 0, 12, 2, 1, 2, 5, 6, 4, 13, 1, 5, 11, 7, 7, 1, 2, 18, 12, 17, 15, 1, 8, 19, 15, 12, 16, 18, 8, 12, 0, 12, 19, 18, 2, 11, 0, 9, 14, 8, 11, 8, 11, 8, 1, 15, 13, 4, 4, 17, 1, 12, 16, 5, 10, 8, 4, 14, 16, 13, 16, 1, 4, 1, 1, 18, 16, 8, 16, 16, 18, 16, 3, 11, 13, 15, 0, 1, 13, 5, 18, 8, 12, 9, 5, 4, 6, 0, 2, 5, 17, 2, 12, 19, 1, 16, 16, 13, 7, 1, 6, 5, 17, 8, 13, 14, 15, 3, 14, 1, 14, 8, 13, 19, 17, 5, 2, 1, 19, 9, 4, 6, 14, 10, 19, 1, 10, 5, 1, 14, 11, 8, 16, 19, 0, 8, 19, 13, 19, 7, 19, 13, 17, 9, 4, 3, 1, 13, 19, 6, 12, 5, 11]
average_production_rate:[1.0, 0.1, 1.0, 0.0, 0.6, 1.8, 1.3, 1.3, 0.5, 0.0, 0.8, 1.0, 0.3, 1.5, 2.2, 1.8, 0.1, 0.0, 0.9, 0.3]
maximum_transition_time:inf
average_order_quantity:17.375
deadline_variance:187.4544
product_to_order_ratio:0.1
average_deadline_per_product:[22.22222222222222, 30.22222222222222, 21.333333333333332, 27.2, 22.153846153846153, 29.333333333333332, 35.2, 22.666666666666668, 27.733333333333334, 25.142857142857142, 27.2, 24.0, 22.0, 30.285714285714285, 31.11111111111111, 19.0, 28.0, 29.0, 22.0, 35.07692307692308]
production_line_utilization_potential:[inf, inf, inf, inf, inf, inf, inf, inf, inf, inf]
Note: Some data are omitted due to space constraints.

The state data some heuristic values for current stage:
current_solution:
production_line_0: 35->191
production_line_1: 69->88
production_line_2: 72
production_line_3: 32->59->82->87
production_line_4: 
production_line_5: 
production_line_6: 62->97->141->175
production_line_7: 33->40->107->113->116->1
production_line_8: 
production_line_9: 20

fulfilled_order_num:20
fulfilled_orders:[35, 191, 69, 88, 72, 32, 59, 82, 87, 62, 97, 141, 175, 33, 40, 107, 113, 116, 1, 20]
unfulfilled_orders:[0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199]
total_time_cost_per_production_line:[2.0, 2.0, 1.0, 4.0, 0.0, 0.0, 4.0, 6.0, 0.0, 1.0]
feasible_orders_to_fulfill:[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 34, 36, 38, 39, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 197, 198, 199]
fulfillment_ratio:0.1
average_time_cost:2.0
max_time_cost:6.0
unfulfilled_order_quantity_sum:3387.0
unfulfilled_order_deadline_variance:189.12395061728395
feasible_order_count:158
solution_validity:True
Note: Some data are omitted due to space constraints.

Before this discuss, we have already 1 rounds discuss and the summary are:
---Round 0---
Heuristic: greedy_by_order_density_de77
Parameters: {}
Running Steps: 20
Explain: Based on the current data, we have a high number of unfulfilled orders (200) and a feasible order count of 179. The fulfillment ratio is 0.0, indicating that no orders have been scheduled yet. The heuristic `greedy_by_order_density_de77` is well-suited to prioritize orders based on deadline tightness and feasibility, which is crucial at this early stage when constructing the initial solution. Running it for 20 steps will help establish a baseline solution by addressing high-priority orders first.
Delta of Total Time Cost For All Production Lines: 20.0
Delta of Feasible Orders To Fulfill Num: -1657
Delta of Fulfilled Order Num: 20

Considerations for Next Steps
- Is the current data sufficient for decision-making?
- Is there a need to construct or refine the solution further?
- The last heuristic is: greedy_by_order_density_de77. How does greedy_by_order_density_de77 perform, and should we continue with it?
- How much steps should we run for next heuristic?

Decision Options:
We aim to incrementally construct an optimal solution by strategically applying a set of heuristic algorithms. Each heuristic, when applied, contributes one operator to the evolving solution. Here is the refined process:
1. I will present you with the initial data. Your role will be to evaluate this data and select the most appropriate heuristic algorithm from our pool of heuristics. This selection will be based on predefined criteria and heuristic performance measures.
2. I will then execute the chosen heuristic for a number of steps, resulting in a partial solution. Once this stage is complete, I will provide you with the updated solution state. Your task will be to assess the progress and determine whether to:
    - Continue with the same heuristic algorithm to further develop the current solution, or
    - Switch to a different heuristic algorithm from our pool to either enhance the existing solution or take a new approach to the problem.

As the selection hyper-heuristic algorithm agent, your role is critical in orchestrating the application of these heuristics to navigate towards an improved or final solution. Please familiarize yourself with the available heuristic algorithms and the overall decision-making pipeline. Once I introduce the specific data for our problem, we will collaborate to advance towards the solution.

The response format is very important. For better communication, please respond to me in this format:
1. If you believe the we should continue to build or improve solution, please respond to me in this format:
***Run heuristic:
selected heuristic: heuristic_name
running steps: N
hype parameter(optional): a=xx;b=xx
explanation: xxx
***
2. If you think the solution can not be improved, please respond to me in this format:
***Stop***

------------------------------------------------------------------------------------

assistant
Based on the provided data and the summary of Round 0, the following analysis is made:

### **Analysis:**
1. **Current State:**
   - Fulfilled Order Ratio: **10% (20/200)**
   - Feasible Orders to Fulfill: **158 orders** are still possible to be integrated into the schedule without violating constraints.
   - Unfulfilled Orders: A significant number (**3387 total quantity**) remains unscheduled.
   - Total Time Cost Across Production Lines: **Average = 2.0, Max = 6.0**
   - Solution Validity: **True**, indicating that the current schedule meets all constraints.

2. **Heuristic Performance in Round 0:**
   - `greedy_by_order_density_de77` successfully fulfilled **20 orders** in 20 steps, demonstrating its ability to prioritize high-priority orders.
   - However, the **drop in feasible orders (-1657)** suggests that the heuristic may have reduced the flexibility for future scheduling.

3. **Next Steps:**
   - The fulfillment ratio is still very low (**10%**), so additional heuristics are needed to continue improving the solution.
   - Considering the **high imbalance in production line utilization** (some lines are idle, while others reach 6.0 time cost), a heuristic that redistributes workload or optimizes line utilization is recommended.
   - The **high variance in deadlines** and the large number of unfulfilled orders suggest that focusing on short operations or shifting orders between lines could help integrate more orders into the schedule.

---

### **Recommended Heuristic:**
- **Heuristic Name:** `shortest_operation_ae31`
- **Reason for Selection:**
  - This heuristic prioritizes short-duration operations, making it effective for filling gaps in the schedule without delaying existing orders.
  - It dynamically searches for insertion positions, shifts orders, and optimizes through swaps, which aligns well with the current state of underutilized production lines.
  - It is expected to improve the fulfillment ratio while maintaining solution feasibility.

---

### **Proposed Steps:**
***Run heuristic:
selected heuristic: shortest_operation_ae31
running steps: 30
explanation: Given the low fulfillment ratio (10%) and high imbalance in production line utilization, `shortest_operation_ae31` can efficiently prioritize short operations to improve the schedule incrementally. Running it for 30 steps will provide an opportunity to explore better insertion positions, dynamically balance workloads, and maximize fulfilled orders without compromising feasibility.
***
------------------------------------------------------------------------------------

