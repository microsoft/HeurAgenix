[
    {
        "role": "user",
        "content": [
            {
                "type": "text",
                "text": "I am working on Hyper-heuristics for Combinatorial Operation (CO) problem.\nIn this conversation, I will introduce the problem and then framework we have built now, you just remember this.\nIn next conversation, I will describe the challenges I'm encountering and explore how we can collaborate to resolve them.\n\nCurrently, I am working on dposp problem:\nDynamic Production Order Scheduling Problem (DPOSP) involves multiple machines, each capable of producing various products. The production speed for different products varies across machines, and some transitions between products are not allowed. Each order specifies the required product, quantity, and deadline, and an order is considered completed only if all requirements are met by the deadline. Orders completed after the deadline are invalid. Each production action corresponds to an order, and the plan for each production line can be represented as a list, where each item denotes an order. The start time of each production is calculated based on the sum of the previous production and transition times, ensuring that each production is completed before the deadline. Our objective is to maximize the number of completed orders, with each order having the same priority, regardless of the quantity required.\n\nTo formally describe DPOSP, we build the following optimization model. Let X_ij represent the j-th production action on the i-th production line, whereX_ij=k indicates that the j-th action on the i-th production line is producing order k, and X_ij=0 if there is no production action. The problem includes the following components:\n\n**Maximize**\nSum over all production lines (i) and production actions (j) of the indicator function I(X_ij != 0)\n\n**Subject to**\n1. For each order k, sum over all production lines (i) and production actions (j) of the indicator function I(X_ij = k) <= 1.\n2. The start time s_ij is set to:\n   - 0 if j = 1 (the first action on the production line starts at time 0)\n   - The end time of the previous action (e_i,j-1) plus the transition time between the products of the previous action (P_k_j-1) and the current action (P_k_j) if j > 1.\n3. The end time e_ij is calculated as the start time s_ij plus the quantity of order k divided by the production speed of the production line i for product P_k, if X_ij = k.\n4. The end time e_ij must be less than or equal to the deadline D_k for the order k, if X_ij = k.\n\nWhere:\n- X_ij (Decision Variable) represents the j-th production action on the i-th production line, with X_ij = k indicating production of order k and X_ij = 0 indicating no action; X_ij can take values in the set {0, 1, ..., k}.\n- v_ip (Input Variable) is the production speed of production line i for product p. If v_ip = 0, the product cannot be produced on line i.\n- t_i,p,p' (Input Variable) is the transition time for production line i from product p to product p'. If t_i,p,p' is infinity, the transition is not allowed.\n- Q_k (Input Variable) is the quantity required for order k.\n- P_k (Input Variable) is the product required for order k.\n- D_k (Input Variable) is the deadline for order k.\n- s_ij (Intermediate Variable) is the start time of the j-th production action on production line i.\n- e_ij (Intermediate Variable) is the end time of the j-th production action on production line i.\n- I() (Indicator Function) equals 1 if the condition is true, and 0 otherwise.\n\n\nTo support different heuristic algorithms, I build the Solution and Operator framework.\nThe Solution is designed as:\nclass Solution:\n    \"\"\"The solution of DPOSP.\nA list of lists, where each sublist corresponds to a production line's planned sequence of orders.\nEach integer within the sublist represents an order to be fulfilled by the machine, in the sequence they are to be produced.\"\"\"\n    def __init__(self, production_schedule: list[list[int]]):\n        self.production_schedule = production_schedule\nOperator servers as a mechanism to modify solution, which enables the application of heuristic algorithms.\u00a0\nTo support heuristic algorithm, we have build the following operators:\nclass AppendOperator(BaseOperator):\n    \"\"\"Appends an order to the end of a specified production line's schedule.\"\"\"\n    def __init__(self, production_line_id: int, order_id: int):\n        self.production_line_id = production_line_id\n        self.order_id = order_id\n    def run(self, solution: Solution) -> Solution:\n        new_schedule = [order[:] for order in solution.production_schedule]\n        new_schedule[self.production_line_id].append(self.order_id)\n        return Solution(new_schedule)\nclass InsertOperator(BaseOperator):\n    \"\"\"Inserts an order at a specified position within a production line's schedule.\"\"\"\n    def __init__(self, production_line_id: int, order_id: int, position: int):\n        self.production_line_id = production_line_id\n        self.order_id = order_id\n        self.position = position\n    def run(self, solution: Solution) -> Solution:\n        new_schedule = [order[:] for order in solution.production_schedule]\n        new_schedule[self.production_line_id].insert(self.position, self.order_id)\n        return Solution(new_schedule)\nclass SwapOperator(BaseOperator):\n    \"\"\"Swaps two orders between or within production lines.\"\"\"\n    def __init__(self, production_line_id1: int, position1: int, production_line_id2: int, position2: int):\n        if production_line_id1 <= production_line_id2:\n            self.production_line_id1 = production_line_id1\n            self.position1 = position1\n            self.production_line_id2 = production_line_id2\n            self.position2 = position2\n        else:\n            self.production_line_id1 = production_line_id2\n            self.position1 = position2\n            self.production_line_id2 = production_line_id1\n            self.position2 = position1\n    def run(self, solution: Solution) -> Solution:\n        new_schedule = [order[:] for order in solution.production_schedule]\n        (new_schedule[self.production_line_id1][self.position1], new_schedule[self.production_line_id2][self.position2]) = (new_schedule[self.production_line_id2][self.position2], new_schedule[self.production_line_id1][self.position1])\n        return Solution(new_schedule)\nclass ReverseSegmentOperator(BaseOperator):\n    \"\"\"Reverses a segment of orders within a production line's schedule.\"\"\"\n    def __init__(self, production_line_id: int, segments: list[tuple[int, int]]):\n        self.production_line_id = production_line_id\n        self.segments = segments\n    def run(self, solution: Solution) -> Solution:\n        new_schedule = [order[:] for order in solution.production_schedule]\n        for segment in self.segments:\n            (start_index, end_index) = segment\n            assert 0 <= start_index < len(new_schedule[self.production_line_id])\n            assert 0 <= end_index < len(new_schedule[self.production_line_id])\n            if start_index > end_index:\n                (start_index, end_index) = (end_index, start_index)\n            new_schedule[self.production_line_id][start_index:end_index + 1] = reversed(new_schedule[self.production_line_id][start_index:end_index + 1])\n        return Solution(new_schedule)\nclass RelocateOperator(BaseOperator):\n    \"\"\"Moves an order from one position to another within the same or to a different production line.\"\"\"\n    def __init__(self, source_production_line_id: int, source_position: int, target_production_line_id: int, target_position: int):\n        self.source_production_line_id = source_production_line_id\n        self.source_position = source_position\n        self.target_production_line_id = target_production_line_id\n        self.target_position = target_position\n    def run(self, solution: Solution) -> Solution:\n        new_schedule = [order[:] for order in solution.production_schedule]\n        order = new_schedule[self.source_production_line_id].pop(self.source_position)\n        if not new_schedule[self.target_production_line_id]:\n            new_schedule[self.target_production_line_id].append(order)\n        else:\n            new_schedule[self.target_production_line_id].insert(self.target_position, order)\n        return Solution(new_schedule)\nclass MergeOperator(BaseOperator):\n    \"\"\"Merges the schedule of a source production line into the beginning of a target production line's schedule. \nThe merged schedule is assigned to the target production line, and the source production line's schedule is cleared.\"\"\"\n    def __init__(self, source_production_line_id: int, target_production_line_id: int):\n        self.source_production_line_id = source_production_line_id\n        self.target_production_line_id = target_production_line_id\n    def run(self, solution: Solution) -> Solution:\n        new_schedule = [order[:] for order in solution.production_schedule]\n        new_schedule[self.target_production_line_id] = new_schedule[self.source_production_line_id] + new_schedule[self.target_production_line_id]\n        new_schedule[self.source_production_line_id] = []\n        return Solution(new_schedule)\n\nIn pursuit of augmenting our heuristic algorithmic suite, we require the following standardized heuristic function signature:\ndef heuristic(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: call, **kwargs) -> tuple[TargetOperatorType, dict]:\nThe inputs are:\n- \"product_num\" (int): Total number of unique products.\n- \"production_line_num\" (int): Total number of production lines.\n- \"order_num\" (int): Total number of orders to be scheduled.\n- \"production_rate\" (numpy.array): 2D array of production time for each product on each production line, and shape is (production_line_num, product_num)\n- \"transition_time\" (numpy.array): 3D array of transition time between products on each production line, and shape is (production_line_num, product_num, product_num)\n- \"order_product\" (numpy.array): 1D array mapping each order to its required product and length is order_num.\n- \"order_quantity\" (numpy.array): 1D array of the quantity required for each order and length is order_num.\n- \"order_deadline\" (numpy.array): 1D array of the deadline for each order and length is order_num.\n- \"current_solution\" (Solution): Current scheduling solution.\n- \"fulfilled_order_num\" (int): Number of fulfilled orders.\n- \"fulfilled_orders\" (list[int]): List of fulfilled orders.\n- \"unfulfilled_orders\" (list[int]): List of unfulfilled orders.\n- \"total_time_cost_per_production_line\" (numpy.array): 1D array of the sum of production and transition times for each production line.\n- \"feasible_orders_to_fulfill\" (list): The feasible orders that can be fulfilled based on the current solution without delaying other planned orders.\n- \"validation_single_production_schedule\" (callable): def validation_single_production_schedule(production_line_id: int, production_schedule: list[int]) -> bool: function to check whether the production schedule is valid.\n- \"get_time_cost_delta\" (callable): def get_time_cost_delta(production_line_id: int, order_id: int, position: int, solution: Solution=None) -> float: function to get the time cost for following order after insert in this solution. solution can be omitted if using current solution.\n- \"validation_solution\" (callable): def validation_solution(solution: Solution) -> bool: function to check whether new solution is valid.\nalgorithm_data(dict): Algorithm data contains the data that necessary for some algorithms.\nget_state_data_function(callable): The get_state_data_function is the function that receives the new solution as input and return the state dictionary for new solution. It will not modify the origin solution.\nOther hyper-parameters in kwargs.\nThe outputs includes the operator that must be an instance of a predefined target operator type and updated algorithm dict, which contains new information for future work for both this or other algorithm.\n\nPlease consider is dposp a combinatorial operation problem and can be solved by heuristics?\nIf you think this problem is not a combinatorial operation problem or the solution, operator, data are incorrect, response ***is_cop:no*** to me, or response ***is_cop:yes***.\n\nThe response format is very important. For better communication, please respond to me in this format:\n***is_cop:yes/no***\nEnsure there is no other content inside the ***, and analysis outside *** are welcome.\nIf you have no information to provide, simply respond with ***None***."
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "type": "text",
                "text": "***is_cop:yes***\n\nThe Dynamic Production Order Scheduling Problem (DPOSP) you've described is indeed a combinatorial optimization problem. It involves finding the optimal configuration of production orders across multiple production lines, considering constraints such as production speeds, transition times, and deadlines. The use of heuristic methods to explore potential solutions and iteratively improve them is a common approach in tackling combinatorial optimization problems, especially when the solution space is large and complex, as is the case here. Your framework with various operators to modify solutions aligns well with heuristic approaches, allowing for flexibility and adaptability in searching for optimal or near-optimal solutions."
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "type": "text",
                "text": "We have already implement the following heuristics.\nThese are the heuristics inb format: heuristic_name(parameter=default_value, ..): introduction\nfrom src.problems.dposp.components import *\nimport numpy as np\n\ndef greedy_by_order_density_de77(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[AppendOperator, dict]:\n    \"\"\"Heuristic to prioritize orders based on a weighted combination of deadline tightness, production feasibility, and potential flexibility for future scheduling.\n\n    Args:\n        global_data (dict): The global data dict containing the global data. In this algorithm, the following items are necessary:\n            - production_rate (numpy.array): 2D array of production speeds for each product on each production line.\n            - transition_time (numpy.array): 3D array of transition times between products for each production line.\n            - order_deadline (numpy.array): 1D array of deadlines for each order.\n            - order_quantity (numpy.array): 1D array of quantities required for each order.\n            - order_product (numpy.array): 1D array mapping each order to its required product.\n            - production_line_num (int): Total number of production lines.\n        state_data (dict): The state dictionary containing the current state information. In this algorithm, the following items are necessary:\n            - current_solution (Solution): Current scheduling solution.\n            - feasible_orders_to_fulfill (list[int]): List of feasible orders that can be fulfilled.\n            - validation_single_production_schedule (callable): Function to validate a single production schedule.\n            - get_time_cost_delta (callable): Function to compute the time cost delta for inserting an order.\n        algorithm_data (dict): The algorithm dictionary for current algorithm only. This algorithm does not modify algorithm data.\n        get_state_data_function (callable): The function receives the new solution as input and returns the state dictionary for the new solution, without modifying the origin solution.\n        kwargs: Hyper-parameters for the heuristic:\n            - flexibility_weight (float, default=1.0): Weight for the flexibility factor in the scoring system.\n\n    Returns:\n        AppendOperator: The operator to append the selected order to a production line's schedule.\n        dict: Updated algorithm data (empty in this case).\n    \"\"\"\n    # Extract necessary data from global_data and state_data\n    production_rate = global_data[\"production_rate\"]\n    transition_time = global_data[\"transition_time\"]\n    order_deadline = global_data[\"order_deadline\"]\n    order_quantity = global_data[\"order_quantity\"]\n    order_product = global_data[\"order_product\"]\n    production_line_num = global_data[\"production_line_num\"]\n\n    current_solution = state_data[\"current_solution\"]\n    feasible_orders_to_fulfill = state_data[\"feasible_orders_to_fulfill\"]\n    validation_single_production_schedule = state_data[\"validation_single_production_schedule\"]\n    get_time_cost_delta = state_data[\"get_time_cost_delta\"]\n\n    # Hyper-parameters\n    flexibility_weight = kwargs.get(\"flexibility_weight\", 1.0)\n\n    # Return None if no feasible orders are available\n    if not feasible_orders_to_fulfill:\n        return None, {}\n\n    # Step 1: Calculate scores for feasible orders\n    best_operator = None\n    best_score = -float('inf')\n\n    for order_id in feasible_orders_to_fulfill:\n        product_id = order_product[order_id]\n        deadline_weight = 1 / (order_deadline[order_id] + 1)\n        quantity_penalty = 1 / order_quantity[order_id]\n\n        for line_id in range(production_line_num):\n            # Skip if the production line cannot produce this product\n            if production_rate[line_id][product_id] == 0:\n                continue\n\n            current_schedule = current_solution.production_schedule[line_id]\n\n            # Simulate appending the order at the end of the production line\n            new_schedule = current_schedule + [order_id]\n\n            # Validate the new schedule\n            if not validation_single_production_schedule(line_id, new_schedule):\n                continue\n\n            # Calculate flexibility factor based on the number of feasible orders after this insertion\n            future_feasibility = sum(\n                1 for future_order in feasible_orders_to_fulfill\n                if future_order != order_id and production_rate[line_id][order_product[future_order]] > 0\n            )\n            flexibility_factor = 1 / (future_feasibility + 1)\n\n            # Calculate insertion cost\n            delta_time_cost = get_time_cost_delta(line_id, order_id, len(current_schedule))\n\n            # Calculate overall score for this insertion\n            score = deadline_weight * quantity_penalty * (flexibility_factor ** flexibility_weight) - delta_time_cost\n\n            # Update the best operator if the score is higher\n            if score > best_score:\n                best_score = score\n                best_operator = AppendOperator(production_line_id=line_id, order_id=order_id)\n\n    # Return the best operator and empty updated algorithm data\n    if best_operator:\n        return best_operator, {}\n    return None, {}\nfrom src.problems.dposp.components import *\nimport numpy as np\n\ndef least_order_remaining_27ca(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[AppendOperator, dict]:\n    \"\"\" Heuristic to prioritize orders based on a weighted score incorporating deadline proximity, production feasibility, and potential to maximize fulfilled orders.\n\n    Args:\n        global_data (dict): The global data dict containing the global data. In this algorithm, the following items are necessary:\n            - production_rate (numpy.array): 2D array of production speeds for each product on each production line.\n            - order_deadline (numpy.array): 1D array of deadlines for each order.\n            - order_quantity (numpy.array): 1D array of quantities required for each order.\n            - order_product (numpy.array): 1D array mapping each order to its product.\n            - production_line_num (int): Total number of production lines.\n        state_data (dict): The state dictionary containing the current state information. In this algorithm, the following items are necessary:\n            - current_solution (Solution): Current scheduling solution.\n            - feasible_orders_to_fulfill (list[int]): List of feasible orders that can be fulfilled.\n            - validation_single_production_schedule (callable): Function to validate a single production schedule.\n            - get_time_cost_delta (callable): Function to compute the time cost delta for inserting an order.\n        algorithm_data (dict): The algorithm dictionary for current algorithm only. In this algorithm, the following items are necessary:\n            - operation_count (int): The number of operations performed so far. Defaults to 0.\n        get_state_data_function (callable): The function receives the new solution as input and returns the state dictionary for the new solution, without modifying the origin solution.\n        kwargs: Hyper-parameters for the heuristic:\n            - swap_frequency (int, default=10): Frequency (in terms of operations) at which swap optimization is performed.\n            - shift_frequency (int, default=5): Frequency (in terms of operations) at which order shifting is performed.\n\n    Returns:\n        AppendOperator: The operator to append the selected order to a production line's schedule.\n        dict: Updated algorithm data, if any.\n    \"\"\"\n    # Extract necessary data from global_data and state_data\n    production_rate = global_data[\"production_rate\"]\n    order_deadline = global_data[\"order_deadline\"]\n    order_quantity = global_data[\"order_quantity\"]\n    order_product = global_data[\"order_product\"]\n    production_line_num = global_data[\"production_line_num\"]\n\n    current_solution = state_data[\"current_solution\"]\n    feasible_orders_to_fulfill = state_data[\"feasible_orders_to_fulfill\"]\n    validation_single_production_schedule = state_data[\"validation_single_production_schedule\"]\n    get_time_cost_delta = state_data[\"get_time_cost_delta\"]\n\n    # Hyper-parameters\n    swap_frequency = kwargs.get(\"swap_frequency\", 10)\n    shift_frequency = kwargs.get(\"shift_frequency\", 5)\n    operation_count = algorithm_data.get(\"operation_count\", 0)\n\n    # Return None if no feasible orders are available\n    if not feasible_orders_to_fulfill:\n        return None, {\"operation_count\": operation_count}\n\n    # Step 1: Calculate scores for feasible orders\n    best_operator = None\n    max_score = -float('inf')\n\n    for order_id in feasible_orders_to_fulfill:\n        product_id = order_product[order_id]\n        deadline_weight = 1 / (order_deadline[order_id] + 1)\n        quantity_penalty = 1 / order_quantity[order_id]\n\n        for line_id in range(production_line_num):\n            # Skip if the production line cannot produce this product\n            if production_rate[line_id][product_id] == 0:\n                continue\n\n            current_schedule = current_solution.production_schedule[line_id]\n\n            # Simulate appending the order at the end of the production line\n            new_schedule = current_schedule + [order_id]\n\n            # Validate the new schedule\n            if not validation_single_production_schedule(line_id, new_schedule):\n                continue\n\n            # Calculate feasibility factor for this order on this production line\n            feasibility_factor = 1 / (len(current_schedule) + 1)  # Simple normalization\n\n            # Calculate the score for this order\n            score = deadline_weight * quantity_penalty * feasibility_factor\n\n            # Update the best operator if the score is higher\n            if score > max_score:\n                max_score = score\n                best_operator = AppendOperator(production_line_id=line_id, order_id=order_id)\n\n    # Step 2: Perform order shifting periodically\n    if operation_count % shift_frequency == 0:\n        for source_line_id, source_schedule in enumerate(current_solution.production_schedule):\n            for order_id in source_schedule:\n                for target_line_id in range(production_line_num):\n                    if source_line_id == target_line_id or production_rate[target_line_id][order_product[order_id]] == 0:\n                        continue\n\n                    for position in range(len(current_solution.production_schedule[target_line_id]) + 1):\n                        # Attempt to shift the order and validate schedules\n                        trial_target_schedule = current_solution.production_schedule[target_line_id][:]\n                        trial_source_schedule = source_schedule[:]\n                        trial_target_schedule.insert(position, order_id)\n                        trial_source_schedule.remove(order_id)\n\n                        if not validation_single_production_schedule(source_line_id, trial_source_schedule) or not validation_single_production_schedule(target_line_id, trial_target_schedule):\n                            continue\n\n                        # Calculate time cost\n                        delta_time_cost = get_time_cost_delta(target_line_id, order_id, position)\n                        if delta_time_cost < 0:  # Improvement\n                            best_operator = RelocateOperator(\n                                source_production_line_id=source_line_id,\n                                source_position=source_schedule.index(order_id),\n                                target_production_line_id=target_line_id,\n                                target_position=position\n                            )\n\n    # Step 3: Perform swap optimization periodically\n    if operation_count % swap_frequency == 0:\n        for line_id, schedule in enumerate(current_solution.production_schedule):\n            for i in range(len(schedule) - 1):\n                for j in range(i + 1, len(schedule)):\n                    # Attempt to swap and validate the new schedule\n                    new_schedule = schedule[:]\n                    new_schedule[i], new_schedule[j] = new_schedule[j], new_schedule[i]\n\n                    if validation_single_production_schedule(line_id, new_schedule):\n                        delta_time_cost = get_time_cost_delta(line_id, schedule[j], i) + get_time_cost_delta(line_id, schedule[i], j)\n                        if delta_time_cost < 0:  # Improvement\n                            best_operator = SwapOperator(\n                                production_line_id1=line_id, position1=i,\n                                production_line_id2=line_id, position2=j\n                            )\n\n    # Update operation count and return the best operator found\n    if best_operator:\n        return best_operator, {\"operation_count\": operation_count + 1}\n    return None, {\"operation_count\": operation_count + 1}\nfrom src.problems.dposp.components import *\nimport numpy as np\n\ndef shortest_operation_ae31(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertOperator, dict]:\n    \"\"\"Shortest Operation Heuristic with Optimization (AE31) for DPOSP.\n\n    This heuristic aims to maximize the number of fulfilled orders by prioritizing orders based on deadlines, feasibility, and production times. \n    It dynamically searches for better insertion positions, shifts orders, and periodically optimizes through swaps.\n\n    Args:\n        global_data (dict): The global data dict containing the global data. In this algorithm, the following items are necessary:\n            - \"production_line_num\" (int): Total number of production lines.\n            - \"order_num\" (int): Total number of orders.\n            - \"order_quantity\" (list[int]): Quantity required for each order.\n            - \"order_deadline\" (list[float]): Deadline for each order.\n            - \"order_product\" (list[int]): Product associated with each order.\n            - \"production_rate\" (numpy.array): 2D array of production speeds for each product on each production line.\n            - \"transition_time\" (numpy.array): 3D array of transition times between products for each production line.\n        state_data (dict): The state dictionary containing the current state information. In this algorithm, the following items are necessary:\n            - \"current_solution\" (Solution): Current scheduling solution.\n            - \"unfulfilled_orders\" (list[int]): List of unfulfilled orders.\n            - \"feasible_orders_to_fulfill\" (list[int]): List of feasible orders that can be fulfilled.\n            - \"validation_single_production_schedule\" (callable): Function to validate a single production schedule.\n            - \"get_time_cost_delta\" (callable): Function to compute the time cost delta for inserting an order.\n            - \"total_time_cost_per_production_line\" (list[float]): Total time cost for each production line.\n        algorithm_data (dict): The algorithm dictionary for current algorithm only. This heuristic does not use algorithm_data.\n        get_state_data_function (callable): The function receives the new solution as input and returns the state dictionary for the new solution, without modifying the original solution.\n        **kwargs: Hyper-parameters for the heuristic:\n            - swap_frequency (int, default=10): Frequency (in terms of operations) at which swap optimization is performed.\n            - shift_frequency (int, default=5): Frequency (in terms of operations) at which order shifting is performed.\n\n    Returns:\n        InsertOperator: The operator to insert the selected order into the selected production line.\n        dict: Updated algorithm data, if any.\n    \"\"\"\n    # Extract necessary data from global_data and state_data\n    production_line_num = global_data[\"production_line_num\"]\n    order_deadline = global_data[\"order_deadline\"]\n    order_quantity = global_data[\"order_quantity\"]\n    order_product = global_data[\"order_product\"]\n    production_rate = global_data[\"production_rate\"]\n    transition_time = global_data[\"transition_time\"]\n\n    current_solution = state_data[\"current_solution\"]\n    feasible_orders_to_fulfill = state_data[\"feasible_orders_to_fulfill\"]\n    validation_single_production_schedule = state_data[\"validation_single_production_schedule\"]\n    get_time_cost_delta = state_data[\"get_time_cost_delta\"]\n\n    # Hyper-parameters\n    swap_frequency = kwargs.get(\"swap_frequency\", 10)\n    shift_frequency = kwargs.get(\"shift_frequency\", 5)\n    operation_count = algorithm_data.get(\"operation_count\", 0)\n\n    # Return None if no feasible orders are available\n    if not feasible_orders_to_fulfill:\n        return None, {\"operation_count\": operation_count}\n\n    # Step 1: Prioritize feasible orders based on deadlines and quantities\n    sorted_orders = sorted(\n        feasible_orders_to_fulfill,\n        key=lambda order: (order_deadline[order], order_quantity[order])\n    )\n\n    # Step 2: Search for the best insertion position for each feasible order\n    best_operator = None\n    min_time_cost = float('inf')\n\n    for order_id in sorted_orders:\n        product_id = order_product[order_id]\n        for line_id in range(production_line_num):\n            # Skip if the production line cannot produce this product\n            if production_rate[line_id][product_id] == 0:\n                continue\n\n            current_schedule = current_solution.production_schedule[line_id]\n\n            for position in range(len(current_schedule) + 1):\n                # Validate the potential new schedule\n                new_schedule = current_schedule[:]\n                new_schedule.insert(position, order_id)\n\n                if not validation_single_production_schedule(line_id, new_schedule):\n                    continue\n\n                # Calculate the time cost delta\n                delta_time_cost = get_time_cost_delta(line_id, order_id, position)\n                if delta_time_cost < min_time_cost:\n                    min_time_cost = delta_time_cost\n                    best_operator = InsertOperator(production_line_id=line_id, order_id=order_id, position=position)\n\n    # Step 3: Perform order shifting periodically\n    if operation_count % shift_frequency == 0:\n        for source_line_id, source_schedule in enumerate(current_solution.production_schedule):\n            for order_id in source_schedule:\n                for target_line_id in range(production_line_num):\n                    if source_line_id == target_line_id or production_rate[target_line_id][order_product[order_id]] == 0:\n                        continue\n\n                    for position in range(len(current_solution.production_schedule[target_line_id]) + 1):\n                        # Attempt to shift the order and validate schedules\n                        trial_target_schedule = current_solution.production_schedule[target_line_id][:]\n                        trial_source_schedule = source_schedule[:]\n                        trial_target_schedule.insert(position, order_id)\n                        trial_source_schedule.remove(order_id)\n\n                        if not validation_single_production_schedule(source_line_id, trial_source_schedule) or not validation_single_production_schedule(target_line_id, trial_target_schedule):\n                            continue\n\n                        # Calculate time cost\n                        delta_time_cost = get_time_cost_delta(target_line_id, order_id, position)\n                        if delta_time_cost < min_time_cost:\n                            min_time_cost = delta_time_cost\n                            best_operator = RelocateOperator(\n                                source_production_line_id=source_line_id,\n                                source_position=source_schedule.index(order_id),\n                                target_production_line_id=target_line_id,\n                                target_position=position\n                            )\n\n    # Step 4: Perform swap optimization periodically\n    if operation_count % swap_frequency == 0:\n        for line_id, schedule in enumerate(current_solution.production_schedule):\n            for i in range(len(schedule) - 1):\n                for j in range(i + 1, len(schedule)):\n                    # Attempt to swap and validate the new schedule\n                    new_schedule = schedule[:]\n                    new_schedule[i], new_schedule[j] = new_schedule[j], new_schedule[i]\n\n                    if validation_single_production_schedule(line_id, new_schedule):\n                        delta_time_cost = get_time_cost_delta(line_id, schedule[j], i) + get_time_cost_delta(line_id, schedule[i], j)\n                        if delta_time_cost < min_time_cost:\n                            min_time_cost = delta_time_cost\n                            best_operator = SwapOperator(\n                                production_line_id1=line_id, position1=i,\n                                production_line_id2=line_id, position2=j\n                            )\n\n    # Update operation count and return the best operator found\n    if best_operator:\n        return best_operator, {\"operation_count\": operation_count + 1}\n    return None, {\"operation_count\": operation_count + 1}\nfrom src.problems.dposp.components import *\n\ndef exchange_production_orders_eda2(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[SwapOperator, dict]:\n    \"\"\"\n    The exchange production orders heuristic tries to improve the current production schedule by swapping two non-adjacent orders\n    from the same or different production lines and assessing the impact on the total production and transition times. The heuristic\n    is based on the 2-opt approach from TSP and is adapted to consider DPOSP-specific constraints such as varying production speeds,\n    transition times, order deadlines, and production line capabilities.\n\n    Args:\n        global_data (dict): Contains the static problem data. In this algorithm, the following items are necessary:\n            - production_rate (numpy.array): 2D array of production time for each product on each production line.\n            - transition_time (numpy.array): 3D array of transition time between products on each production line.\n            - order_product (numpy.array): 1D array mapping each order to its required product.\n        state_data (dict): Contains the current dynamic state data. In this algorithm, the following items are necessary:\n            - current_solution (Solution): The current scheduling solution.\n            - feasible_orders_to_fulfill (list): List of feasible orders that can be fulfilled without delaying other planned orders.\n            - validation_single_production_schedule (callable): Function to check if a production schedule is valid for a given production line.\n        algorithm_data (dict): Used for storing data necessary for the algorithm.\n        get_state_data_function (callable): Function to get the state data for a new solution.\n\n    Returns:\n        SwapOperator: Operator that swaps two orders in the production schedule.\n        dict: Empty dictionary, as this algorithm does not update algorithm_data.\n    \"\"\"\n\n    # Retrieve necessary information from global_data and state_data\n    production_rate = global_data[\"production_rate\"]\n    transition_time = global_data[\"transition_time\"]\n    order_product = global_data[\"order_product\"]\n    current_solution = state_data[\"current_solution\"]\n    feasible_orders = state_data[\"feasible_orders_to_fulfill\"]\n    validation_schedule = state_data[\"validation_single_production_schedule\"]\n\n    # Initialize best improvement and operator\n    best_improvement = 0\n    best_operator = None\n\n    # Iterate through all pairs of feasible orders to find the best swap\n    for line in range(len(production_rate)):\n        for i in range(len(current_solution.production_schedule[line])):\n            for j in range(i + 1, len(current_solution.production_schedule[line])):\n                order_i = current_solution.production_schedule[line][i]\n                order_j = current_solution.production_schedule[line][j]\n\n                # Perform swap on a copy of the current production schedule\n                new_schedule = [schedule[:] for schedule in current_solution.production_schedule]\n                new_schedule[line][i], new_schedule[line][j] = new_schedule[line][j], new_schedule[line][i]\n\n                # Validate the new schedule for the production line\n                if not validation_schedule(line, new_schedule[line]):\n                    continue\n\n                # Get the state data for the new solution\n                new_state_data = get_state_data_function(Solution(new_schedule))\n\n                # Calculate the time cost difference\n                old_time_cost = state_data[\"total_time_cost_per_production_line\"][line]\n                new_time_cost = new_state_data[\"total_time_cost_per_production_line\"][line]\n\n                # If the new schedule is better, store the improvement and the operator\n                if new_time_cost < old_time_cost and (new_time_cost - old_time_cost) < best_improvement:\n                    best_improvement = new_time_cost - old_time_cost\n                    best_operator = SwapOperator(line, i, line, j)\n\n    # If a best operator was found, return it, else return None\n    if best_operator:\n        return best_operator, {}\n    else:\n        return None, {}\nfrom src.problems.dposp.components import Solution, InsertOperator\n\ndef farthest_deadline_insertion_7e8a(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertOperator, dict]:\n    \"\"\"\n    Farthest Deadline Insertion heuristic for DPOSP.\n    \n    This heuristic selects the unfulfilled order with the farthest deadline and attempts to insert it into a \n    production schedule where it causes the least increase in overall production and transition times, without \n    violating any existing deadlines. The heuristic iterates over each production line, evaluating the insertion \n    of the farthest deadline order at various positions, considering both the production speed of the line for \n    the product and the transition times between orders. The goal is to minimize the impact on the current schedule \n    while ensuring that all orders are completed before their respective deadlines.\n\n    Args:\n        global_data (dict): Contains the global static information data.\n            - \"production_rate\" (numpy.array): 2D array of production times for each product on each line.\n            - \"transition_time\" (numpy.array): 3D array of transition times between products on each line.\n            - \"order_deadline\" (numpy.array): 1D array of the deadline for each order.\n            - \"production_line_num\" (int): Total number of production lines.\n\n        state_data (dict): Contains the current dynamic state data.\n            - \"current_solution\" (Solution): Current scheduling solution.\n            - \"feasible_orders_to_fulfill\" (list): List of feasible orders that can be fulfilled.\n            - \"validation_single_production_schedule\" (callable): Function to check if a production schedule is valid.\n\n    Returns:\n        InsertOperator: Operator to insert the selected order at the best position found.\n        dict: Empty dictionary as no additional algorithm data is updated by this heuristic.\n    \"\"\"\n    # Retrieve necessary data from global_data\n    order_deadline = global_data['order_deadline']\n    production_line_num = global_data['production_line_num']\n    production_rate = global_data['production_rate']\n    transition_time = global_data['transition_time']\n    \n    # Retrieve necessary data from state_data\n    current_solution = state_data['current_solution']\n    feasible_orders_to_fulfill = state_data['feasible_orders_to_fulfill']\n    validation_single_production_schedule = state_data['validation_single_production_schedule']\n    \n    # If no feasible orders to fulfill, return None\n    if not feasible_orders_to_fulfill:\n        return None, {}\n    \n    # Select the unfulfilled order with the farthest deadline\n    farthest_deadline_order = max(feasible_orders_to_fulfill, key=lambda x: order_deadline[x])\n    product_required = global_data['order_product'][farthest_deadline_order]\n    \n    # Initialize variables for the best insertion\n    best_cost_increase = float('inf')\n    best_line_id = None\n    best_position = None\n    \n    # Iterate over each production line to find the best insertion position\n    for line_id in range(production_line_num):\n        # Skip if the production line cannot produce the required product\n        if production_rate[line_id][product_required] == 0:\n            continue\n        \n        schedule = current_solution.production_schedule[line_id]\n        for position in range(len(schedule) + 1):\n            new_schedule = schedule[:]\n            new_schedule.insert(position, farthest_deadline_order)\n            # Validate the new schedule\n            if validation_single_production_schedule(line_id, new_schedule):\n                # Calculate the cost increase if the farthest deadline order was inserted here\n                # Dummy cost calculation, should be replaced with actual cost estimation logic\n                cost_increase = position  # Placeholder for actual cost increase calculation\n                \n                # Update the best insertion if this is the lowest cost increase found so far\n                if cost_increase < best_cost_increase:\n                    best_cost_increase = cost_increase\n                    best_line_id = line_id\n                    best_position = position\n    \n    # If no feasible insertion was found, return None\n    if best_line_id is None:\n        return None, {}\n    \n    # Create the operator to perform the insertion\n    insert_operator = InsertOperator(production_line_id=best_line_id, order_id=farthest_deadline_order, position=best_position)\n    \n    return insert_operator, {}\nfrom src.problems.dposp.components import AppendOperator, InsertOperator, Solution\nimport numpy as np\n\ndef greedy_deadline_proximity_ac6e(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertOperator, dict]:\n    \"\"\"Greedy Deadline Proximity heuristic for DPOSP.\n    This heuristic attempts to construct a production schedule by iteratively appending orders to production lines based on their proximity to their deadline and the transition times between orders. \n    It begins with an empty schedule for each production line and selects orders based on the closest deadline from the current time in the schedule. \n    The heuristic also accounts for the transition time from the last scheduled order to the potential new order and production speeds, ensuring that the added order can be completed before its deadline without violating transition constraints. \n    Orders are chosen to maximize the number of orders fulfilled, considering the remaining processing time and capacity constraints of each production line.\n\n    Args:\n        global_data (dict): The global data dict containing the global data. In this algorithm, the following items are necessary:\n            - production_rate (numpy.array): 2D array of production time for each product on each production line.\n            - transition_time (numpy.array): 3D array of transition time between products on each production line.\n            - order_product (numpy.array): 1D array mapping each order to its required product.\n            - order_quantity (numpy.array): 1D array of the quantity required for each order.\n            - order_deadline (numpy.array): 1D array of the deadline for each order.\n        \n        state_data (dict): The state dictionary containing the current state information. In this algorithm, the following items are necessary:\n            - current_solution (Solution): Current scheduling solution.\n            - feasible_orders_to_fulfill (list[int]): The feasible orders that can be fulfilled based on the current solution without delaying other planned orders.\n            - validation_single_production_schedule (callable): Function to check whether the production schedule is valid.\n        \n    Returns:\n        InsertOperator: The operator that adds an order to a production line's schedule.\n        dict: Empty dictionary as the algorithm does not update any algorithm-specific data.\n    \"\"\"\n    \n    # Extract required data from global_data and state_data\n    production_rate = global_data['production_rate']\n    transition_time = global_data['transition_time']\n    order_product = global_data['order_product']\n    order_quantity = global_data['order_quantity']\n    order_deadline = global_data['order_deadline']\n    \n    current_solution = state_data['current_solution']\n    feasible_orders_to_fulfill = state_data['feasible_orders_to_fulfill']\n    validation_single_production_schedule = state_data['validation_single_production_schedule']\n    \n    # Collect all potential (order, line, position) tuples and sort them by deadline proximity\n    potential_options = []\n    \n    for order_id in feasible_orders_to_fulfill:\n        product = order_product[order_id]\n        quantity = order_quantity[order_id]\n        deadline = order_deadline[order_id]\n        \n        for line_id in range(global_data['production_line_num']):\n            if production_rate[line_id][product] > 0:  # Check if the production line can produce this product\n                for position in range(len(current_solution.production_schedule[line_id]) + 1):\n                    potential_options.append((order_id, line_id, position, deadline))\n    \n    # Sort options by deadline proximity\n    potential_options.sort(key=lambda x: x[3])\n    \n    # Try to find a valid insertion\n    for order_id, line_id, position, deadline in potential_options:\n        new_schedule = current_solution.production_schedule[line_id][:]\n        new_schedule.insert(position, order_id)\n        \n        if validation_single_production_schedule(line_id, new_schedule):\n            return InsertOperator(line_id, order_id, position), {}\n    \n    # If no valid insertion is found, return None\n    return None, {}\nfrom src.problems.dposp.components import Solution, AppendOperator, InsertOperator\n\ndef greedy_order_selection_2882(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertOperator, dict]:\n    \"\"\"\n    Greedy heuristic algorithm for the DPOSP.\n    This algorithm attempts to construct a solution by iteratively adding the most suitable order to a production line's schedule based on a specific criterion such as closest deadline or shortest processing time.\n\n    Args:\n        global_data (dict): Contains the global problem data, including:\n            - production_rate (numpy.array): 2D array of production time for each product on each production line.\n            - transition_time (numpy.array): 3D array of transition time between products on each production line.\n            - order_product (numpy.array): 1D array mapping each order to its required product.\n            - order_quantity (numpy.array): 1D array of the quantity required for each order.\n            - order_deadline (numpy.array): 1D array of the deadline for each order.\n        \n        state_data (dict): Contains the current state of the solution, including:\n            - current_solution (Solution): Current scheduling solution.\n            - unfulfilled_orders (list[int]): List of unfulfilled orders.\n            - total_time_cost_per_production_line (numpy.array): 1D array of the sum of production and transition times for each production line.\n            - validation_single_production_schedule (callable): Function to check whether the production schedule is valid.\n\n    Returns:\n        InsertOperator: The operator that adds an order to the production line's schedule.\n        dict: Empty dictionary as the algorithm does not update any algorithm-specific data.\n    \"\"\"\n    \n    order_deadline = global_data['order_deadline']\n    order_quantity = global_data['order_quantity']\n    order_product = global_data['order_product']\n    production_rate = global_data['production_rate']\n    transition_time = global_data['transition_time']\n    \n    unfulfilled_orders = state_data['unfulfilled_orders']\n    current_solution = state_data['current_solution']\n    total_time_cost_per_production_line = state_data['total_time_cost_per_production_line']\n    validation_single_production_schedule = state_data['validation_single_production_schedule']\n    \n    # Sort unfulfilled orders by closest deadline\n    unfulfilled_orders.sort(key=lambda order: order_deadline[order])\n    \n    for order in unfulfilled_orders:\n        product = order_product[order]\n        quantity = order_quantity[order]\n        deadline = order_deadline[order]\n        \n        # Evaluate a subset of production lines (e.g., top 3 with the least total time cost)\n        line_indices = sorted(range(len(total_time_cost_per_production_line)), key=lambda i: total_time_cost_per_production_line[i])[:3]\n        \n        for line in line_indices:\n            # Check production feasibility\n            if production_rate[line][product] == 0:\n                continue\n            \n            # Evaluate a few potential positions (start, middle, end)\n            positions = [0, len(current_solution.production_schedule[line]) // 2, len(current_solution.production_schedule[line])]\n            \n            for position in positions:\n                new_schedule = [order[:] for order in current_solution.production_schedule]\n                new_schedule[line].insert(position, order)\n                \n                if validation_single_production_schedule(line, new_schedule[line]):\n                    return InsertOperator(line, order, position), {}\n    \n    # If no valid insertion is found, return None\n    return None, {}\nfrom src.problems.dposp.components import Solution, InsertOperator\n\ndef longest_order_next_c9cb(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertOperator, dict]:\n    \"\"\"\n    Longest Order Next heuristic algorithm for DPOSP which selects the unfulfilled order with the longest processing time\n    and schedules it in the most appropriate position on a production line that minimizes delays and respects deadlines.\n\n    Args:\n        global_data (dict): Contains global static information data.\n            - \"production_rate\" (numpy.array): 2D array of production time for each product on each production line.\n            - \"order_quantity\" (numpy.array): 1D array of the quantity required for each order.\n            - \"order_product\" (numpy.array): 1D array mapping each order to its required product.\n\n        state_data (dict): Contains the current dynamic state data.\n            - \"feasible_orders_to_fulfill\" (list): List of feasible orders that can be fulfilled without delaying other planned orders.\n            - \"current_solution\" (Solution): Current scheduling solution.\n            - \"validation_single_production_schedule\" (callable): Function to check the validity of a single production schedule.\n\n    Returns:\n        (InsertOperator): Operator to insert the longest order into the most appropriate position on a production line.\n        (dict): Empty dictionary as no algorithm data is updated.\n    \"\"\"\n    # Extract necessary data\n    production_rate = global_data[\"production_rate\"]\n    order_quantity = global_data[\"order_quantity\"]\n    order_product = global_data[\"order_product\"]\n    feasible_orders = state_data[\"feasible_orders_to_fulfill\"]\n    current_solution = state_data[\"current_solution\"]\n    validation_single_production_schedule = state_data[\"validation_single_production_schedule\"]\n\n    # If there are no feasible orders to fulfill, return None\n    if not feasible_orders:\n        return None, {}\n\n    # Calculate total processing time for each feasible order\n    processing_times = {\n        order_id: order_quantity[order_id] / production_rate[:, order_product[order_id]].mean()\n        for order_id in feasible_orders if production_rate[:, order_product[order_id]].mean() > 0\n    }\n\n    # Find the order with the maximum processing time\n    longest_order_id = max(processing_times, key=processing_times.get)\n\n    # Find the best position to insert this order in any production line\n    for line_id, line_schedule in enumerate(current_solution.production_schedule):\n        for position in range(len(line_schedule) + 1):\n            new_schedule = line_schedule[:]\n            new_schedule.insert(position, longest_order_id)\n            if validation_single_production_schedule(line_id, new_schedule):\n                # Found a valid position to insert the order, return the corresponding InsertOperator\n                return InsertOperator(production_line_id=line_id, order_id=longest_order_id, position=position), {}\n\n    # If no valid position is found, return None\n    return None, {}\nfrom src.problems.dposp.components import *\n\ndef maximum_remaining_work_order_ec9c(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[AppendOperator, dict]:\n    \"\"\"\n    Heuristic that selects the order with the most remaining work that can be feasibly scheduled on any production line\n    without violating existing order deadlines. The chosen order is then appended or inserted into the most appropriate\n    production line's schedule, aiming to maximize the number of orders fulfilled before their respective deadlines.\n    \n    Args:\n        global_data (dict): Contains global static problem information, including:\n            - production_rate (numpy.array): 2D array of production time for each product on each production line.\n            - transition_time (numpy.array): 3D array of transition time between products on each production line.\n            - order_quantity (numpy.array): 1D array of the quantity required for each order.\n            - order_deadline (numpy.array): 1D array of the deadline for each order.\n        state_data (dict): Contains the current state of the solution, including:\n            - current_solution (Solution): Current scheduling solution.\n            - feasible_orders_to_fulfill (list): The feasible orders that can be fulfilled based on the current solution.\n            - validation_single_production_schedule (callable): Function to check if a production schedule is valid.\n    \n    Returns:\n        The AppendOperator or InsertOperator for the selected order.\n        An empty dict as this heuristic does not update the algorithm_data.\n    \"\"\"\n    # Calculate the remaining work for each feasible order based on production rate and order quantity\n    remaining_work_for_orders = {\n        order_id: global_data['order_quantity'][order_id] / global_data['production_rate'][prod_line_id, global_data['order_product'][order_id]]\n        for order_id in state_data['feasible_orders_to_fulfill']\n        for prod_line_id in range(global_data['production_line_num'])\n        if global_data['production_rate'][prod_line_id, global_data['order_product'][order_id]] > 0\n    }\n\n    # Select the order with the maximum remaining work\n    max_work_order_id = max(remaining_work_for_orders, key=remaining_work_for_orders.get, default=None)\n\n    # If no order is selected, return None\n    if max_work_order_id is None:\n        return None, {}\n\n    # Find a production line where the order can be feasibly scheduled\n    for prod_line_id in range(global_data['production_line_num']):\n        if global_data['production_rate'][prod_line_id, global_data['order_product'][max_work_order_id]] > 0:\n            # Check if appending the order is valid\n            validation_function = state_data['validation_single_production_schedule']\n            new_schedule = state_data['current_solution'].production_schedule[prod_line_id] + [max_work_order_id]\n            if validation_function(prod_line_id, new_schedule):\n                # Return the AppendOperator for the selected order and production line\n                return AppendOperator(prod_line_id, max_work_order_id), {}\n\n    # If no valid production line is found, return None\n    return None, {}\nfrom src.problems.dposp.components import *\n\ndef nearest_order_scheduling_1a5e(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[AppendOperator, dict]:\n    \"\"\"\n    Implements the nearest order scheduling heuristic for DPOSP. Starting from an initial order, the heuristic builds\n    a production schedule by selecting and appending the next order that minimizes the combined criteria of setup time\n    (transition time between orders) and proximity to the delivery deadline. The heuristic begins with either a randomly\n    selected order or the one with the earliest deadline and iteratively adds to the schedule the order that is closest\n    in terms of transition time from the previously scheduled order while also taking into account the urgency of order\n    deadlines. This process continues until no further orders can be feasibly added to the schedule without violating\n    deadline constraints.\n\n    Args:\n        global_data (dict): Contains static information for the DPOSP. Relevant keys:\n            - \"transition_time\" (numpy.array): 3D array of transition time between products on each production line.\n            - \"production_rate\" (numpy.array): 2D array of production time for each product on each production line.\n            - \"order_deadline\" (numpy.array): 1D array of the deadline for each order.\n            - \"order_product\" (numpy.array): 1D array mapping each order to its required product.\n\n        state_data (dict): Contains dynamic state information for the DPOSP. Relevant keys:\n            - \"current_solution\" (Solution): Current scheduling solution.\n            - \"feasible_orders_to_fulfill\" (list): List of feasible orders that can be fulfilled.\n            - \"validation_single_production_schedule\" (callable): Function to check whether a production schedule is valid.\n\n        algorithm_data (dict): Contains data necessary for the heuristic, which may be updated and returned.\n\n        get_state_data_function (callable): Function to get the state data for a new solution.\n\n        **kwargs: Optional hyperparameters for the heuristic, which can be used to tweak its behavior.\n\n    Returns:\n        AppendOperator: Operator that appends the selected order to the production schedule.\n        dict: Updated algorithm_data containing any new information for future iterations.\n    \"\"\"\n\n    # Unpack necessary data from global_data\n    transition_time = global_data[\"transition_time\"]\n    production_rate = global_data[\"production_rate\"]\n    order_deadline = global_data[\"order_deadline\"]\n    order_product = global_data[\"order_product\"]\n\n    # Unpack necessary data from state_data\n    current_solution = state_data[\"current_solution\"]\n    feasible_orders = state_data[\"feasible_orders_to_fulfill\"]\n    validation_single_production_schedule = state_data[\"validation_single_production_schedule\"]\n\n    # Start heuristic logic\n    if not feasible_orders:\n        # No feasible orders to schedule, return None\n        return None, {}\n\n    # Select initial order - either the first feasible order or based on a specific criterion\n    initial_order = feasible_orders[0]\n\n    # Find a production line that can produce the initial order\n    for line_id, line_schedule in enumerate(current_solution.production_schedule):\n        # Check if the production line can produce the product and if the transition is allowed\n        product = order_product[initial_order]\n        if production_rate[line_id][product] > 0:\n            # Found a valid line, try to insert the order\n            new_schedule = line_schedule[:] + [initial_order]\n            if validation_single_production_schedule(line_id, new_schedule):\n                # Valid schedule found, return the corresponding operator\n                return AppendOperator(production_line_id=line_id, order_id=initial_order), {}\n\n    # If no valid line is found for the initial order, return None\n    return None, {}\nfrom src.problems.dposp.components import *\n\ndef order_shift_between_lines_bd0c(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[RelocateOperator, dict]:\n    \"\"\"\n    This heuristic attempts to shift an unfulfilled order from one production line to another while adhering to machine capabilities, transition rules, and order deadlines.\n    \n    Args:\n        global_data (dict): Contains the global static information about the problem.\n        state_data (dict): Contains the current dynamic state data of the problem.\n        algorithm_data (dict): Contains data specific to the algorithm (unused in this heuristic).\n        get_state_data_function (callable): Function that generates state data for a given solution.\n    \n    Returns:\n        (RelocateOperator, dict): The operator to shift an order between production lines and an empty dictionary, as the heuristic does not update algorithm_data.\n    \"\"\"\n    # Retrieve necessary data from global_data\n    production_rate = global_data[\"production_rate\"]\n    transition_time = global_data[\"transition_time\"]\n    \n    # Retrieve necessary data from state_data\n    current_solution = state_data[\"current_solution\"]\n    feasible_orders_to_fulfill = state_data[\"feasible_orders_to_fulfill\"]\n    validation_single_production_schedule = state_data[\"validation_single_production_schedule\"]\n    \n    # Set a default value for optional hyper parameters\n    max_attempts = kwargs.get('max_attempts', 100)\n\n    # Initialize variables to store the best shift found\n    best_order_id = None\n    best_source_line_id = None\n    best_target_line_id = None\n    best_position = None\n    best_delta_time_cost = float('inf')\n\n    # Iterate through each feasible order to find a beneficial shift\n    for source_line_id, source_schedule in enumerate(current_solution.production_schedule):\n        for order_id in source_schedule:\n            for target_line_id, target_schedule in enumerate(current_solution.production_schedule):\n                # Skip if it's the same production line or the line cannot produce the product\n                if source_line_id == target_line_id or production_rate[target_line_id][global_data[\"order_product\"][order_id]] == 0:\n                    continue\n\n                # Find the best position to insert the order in the target production line\n                for position in range(len(target_schedule) + 1):\n                    # Copy the current schedule and try inserting the order\n                    trial_target_schedule = target_schedule[:]\n                    trial_target_schedule.insert(position, order_id)\n                    trial_source_schedule = source_schedule[:]\n                    trial_source_schedule.remove(order_id)\n\n                    # Validate the trial schedule\n                    if not validation_single_production_schedule(source_line_id, trial_source_schedule) or not validation_single_production_schedule(target_line_id, trial_target_schedule):\n                        continue  # Skip if the new schedule is not valid\n\n                    # Calculate the delta time cost of the new schedule\n                    new_production_schedule = [schedule[:] for schedule in current_solution.production_schedule]\n                    new_production_schedule[target_line_id] = trial_target_schedule\n                    new_production_schedule[source_line_id] = trial_source_schedule\n                    state_data_for_trial = get_state_data_function(Solution(new_production_schedule))\n                    delta_time_cost = state_data_for_trial[\"total_time_cost_per_production_line\"][target_line_id] + state_data_for_trial[\"total_time_cost_per_production_line\"][source_line_id] - state_data[\"total_time_cost_per_production_line\"][target_line_id] - state_data[\"total_time_cost_per_production_line\"][source_line_id]\n\n                    # Check if this shift leads to a better solution\n                    if delta_time_cost < best_delta_time_cost:\n                        best_order_id = order_id\n                        best_source_line_id = source_line_id\n                        best_target_line_id = target_line_id\n                        best_position = position\n                        best_delta_time_cost = delta_time_cost\n\n    # If a beneficial shift is found, create and return the corresponding operator\n    if best_order_id is not None:\n        return RelocateOperator(\n            source_production_line_id=best_source_line_id,\n            source_position=state_data[\"current_solution\"].production_schedule[best_source_line_id].index(best_order_id),\n            target_production_line_id=best_target_line_id,\n            target_position=best_position\n        ), {}\n\n    # If no beneficial shift is found, return None\n    return None, {}\nfrom src.problems.dposp.components import *\nimport random\n\ndef random_c05a(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, max_attempts: int = 100) -> tuple[AppendOperator, dict]:\n    \"\"\"Random Order Selection Heuristic for DPOSP.\n    \n    This heuristic randomly selects an unfulfilled order from the list of feasible orders and attempts to append it\n    to a randomly selected production line's schedule. The insertion is validated to ensure that it\n    maintains a valid schedule respecting all production and transition constraints.\n\n    Args:\n        global_data (dict): The global data dict containing the global data. In this algorithm, the following items are necessary:\n            - \"production_line_num\" (int): Total number of production lines.\n            - \"order_num\" (int): Total number of orders.\n        state_data (dict): The state dictionary containing the current state information. In this algorithm, the following items are necessary:\n            - \"current_solution\" (Solution): Current scheduling solution.\n            - \"unfulfilled_orders\" (list[int]): List of unfulfilled orders.\n            - \"feasible_orders_to_fulfill\" (list): List of feasible orders that can be fulfilled.\n            - \"validation_single_production_schedule\" (callable): Function to check if a production schedule is valid.\n        algorithm_data (dict): The algorithm dictionary for current algorithm only. This heuristic does not use algorithm_data.\n        get_state_data_function (callable): Function that returns the state dictionary for new solution. Not used in this heuristic.\n        max_attempts (int): Maximum number of attempts to find a valid operation. Defaults to 100.\n\n    Returns:\n        AppendOperator: The operator to append the selected order to the selected production line.\n        dict: Empty dictionary as no algorithm data is updated.\n    \"\"\"\n    # Extract necessary data from state_data\n    current_solution = state_data[\"current_solution\"]\n    feasible_orders_to_fulfill = state_data[\"feasible_orders_to_fulfill\"]\n    validation_single_production_schedule = state_data[\"validation_single_production_schedule\"]\n\n    # Check if there are any feasible orders to fulfill\n    if not feasible_orders_to_fulfill:\n        return None, {}\n\n    # Attempt to find a valid order to append to a production line\n    for _ in range(max_attempts):\n        # Randomly select an order from the feasible list\n        order_id = random.choice(feasible_orders_to_fulfill)\n        # Randomly select a production line\n        production_line_id = random.randrange(global_data[\"production_line_num\"])\n        # Generate a new schedule by appending the order to the selected production line\n        new_schedule = current_solution.production_schedule[production_line_id][:]\n        new_schedule.append(order_id)\n        # Validate the new schedule\n        if validation_single_production_schedule(production_line_id, new_schedule):\n            # If valid, create and return the AppendOperator\n            return AppendOperator(production_line_id=production_line_id, order_id=order_id), {}\n    \n    # If no valid operation is found after max_attempts, return None\n    return None, {}\nfrom src.problems.dposp.components import *\n\ndef shortest_order_next_25bd(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertOperator, dict]:\n    \"\"\"Shortest Order Next heuristic for DPOSP selects the unfulfilled order with the shortest processing time and inserts it into the best position in the production schedule.\n    \n    Args:\n        global_data (dict): Contains static information about the problem.\n            - production_rate (numpy.array): 2D array of production time for each product on each production line.\n            - order_product (numpy.array): 1D array mapping each order to its required product.\n            - order_quantity (numpy.array): 1D array of the quantity required for each order.\n            \n        state_data (dict): Contains dynamic state information of the solution.\n            - current_solution (Solution): The current solution state.\n            - unfulfilled_orders (list[int]): List of unfulfilled orders.\n            - feasible_orders_to_fulfill (list): The feasible orders that can be fulfilled based on the current solution.\n            - validation_single_production_schedule (callable): Function to check if a production schedule is valid.\n            \n        algorithm_data (dict): Contains data necessary for this heuristic's state, not used in this heuristic.\n\n    Returns:\n        InsertOperator: The operator to insert the selected order into the best position.\n        dict: An empty dictionary as this heuristic does not update algorithm data.\n    \"\"\"\n\n    # Extract necessary information\n    production_rate = global_data[\"production_rate\"]\n    order_product = global_data[\"order_product\"]\n    order_quantity = global_data[\"order_quantity\"]\n    feasible_orders = state_data[\"feasible_orders_to_fulfill\"]\n    validation_single_production_schedule = state_data[\"validation_single_production_schedule\"]\n    current_solution = state_data[\"current_solution\"]\n    \n    # Check if there are any feasible orders to fulfill\n    if not feasible_orders:\n        return None, {}\n\n    # Initialize the best order and its best position\n    best_order = None\n    best_position = None\n    best_production_line = None\n    shortest_time = float('inf')\n    \n    # Check if there is feasible order\n    if len(feasible_orders) == 0:\n        return None, {}\n\n    order_id = feasible_orders[0]\n    product_id = order_product[order_id]\n    quantity = order_quantity[order_id]\n    \n    for line_id, production_line in enumerate(current_solution.production_schedule):\n        production_time = production_rate[line_id][product_id]\n        \n        # Skip if production line cannot produce this product\n        if production_time == 0:\n            continue\n        \n        # Calculate processing time for this order\n        time_to_produce = quantity / production_time\n        \n        # Check for each possible position in the production line\n        for position in range(len(production_line) + 1):\n            new_schedule = production_line[:]\n            new_schedule.insert(position, order_id)\n            \n            # Validate the new schedule\n            if validation_single_production_schedule(line_id, new_schedule):\n                if time_to_produce < shortest_time:\n                    best_order = order_id\n                    best_position = position\n                    best_production_line = line_id\n                    shortest_time = time_to_produce\n\n    # If no feasible order is found, return None\n    if best_order is None:\n        return None, {}\n\n    # Create and return the operator with the best order and its position\n    return InsertOperator(production_line_id=best_production_line, order_id=best_order, position=best_position), {}\nfrom src.problems.dposp.components import *\nimport numpy as np\n\ndef _2opt_production_sequence_8e5e(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[ReverseSegmentOperator, dict]:\n    \"\"\"The 2-opt Production Sequence heuristic adapts the 2-opt approach from TSP to the context of DPOSP. \n    It aims to improve the sequence of production orders on each production line by swapping two non-adjacent orders and re-evaluating the schedule's efficiency.\n    By considering the production rates, transition times, and order deadlines, this heuristic explores alternative sequences that could lead to a higher number of completed orders or reduced total production and transition time.\n    The heuristic iteratively checks all possible pairs of non-adjacent orders within a production line to determine if a more optimal order sequence can be found, taking care to maintain the feasibility of the schedule with respect to order deadlines.\n    If a more efficient sequence is identified, the heuristic generates a ReverseSegmentOperator that applies this improved order sequence to the production line.\n\n    Args:\n        global_data (dict): The global data dict containing the global data. In this algorithm, the following items are necessary:\n            - production_rate (numpy.array): 2D array of production time for each product on each production line.\n            - transition_time (numpy.array): 3D array of transition time between products on each production line.\n            - order_product (numpy.array): 1D array mapping each order to its required product.\n            - order_quantity (numpy.array): 1D array of the quantity required for each order.\n            - order_deadline (numpy.array): 1D array of the deadline for each order.\n        state_data (dict): The state dictionary containing the current state information. In this algorithm, the following items are necessary:\n            - current_solution (Solution): Current scheduling solution.\n            - validation_single_production_schedule (callable): Function to check whether the production schedule is valid.\n        get_state_data_function (callable): Function to get the state data for a new solution.\n\n    Returns:\n        ReverseSegmentOperator: The operator that reverse two nodes in the solution to achieve a shorter production schedule.\n        dict: Empty dictionary as this algorithm does not update algorithm_data.\n    \"\"\"\n    production_rate = global_data[\"production_rate\"]\n    transition_time = global_data[\"transition_time\"]\n    order_product = global_data[\"order_product\"]\n    order_quantity = global_data[\"order_quantity\"]\n    order_deadline = global_data[\"order_deadline\"]\n    \n    current_solution = state_data[\"current_solution\"]\n    validation_single_production_schedule = state_data[\"validation_single_production_schedule\"]\n    \n    best_delta = 0\n    best_pair = None\n    best_line_id = None\n    \n    # Iterate over each production line\n    for line_id, schedule in enumerate(current_solution.production_schedule):\n        # Iterate over all pairs of non-adjacent orders within the production line\n        for i in range(len(schedule) - 1):\n            for j in range(i + 1, len(schedule)):\n                # Calculate the time cost difference if these two orders are swapped\n                order_a, order_b = schedule[i], schedule[i + 1]\n                order_c, order_d = schedule[j], schedule[j + 1] if j + 1 < len(schedule) else None\n                \n                product_a, product_b = order_product[order_a], order_product[order_b]\n                product_c = order_product[order_c]\n                \n                transition_time_ab = transition_time[line_id][product_a][product_b]\n                transition_time_bc = transition_time[line_id][product_b][product_c] if order_d else 0\n                transition_time_ac = transition_time[line_id][product_a][product_c]\n                transition_time_cb = transition_time[line_id][product_c][product_b] if order_d else 0\n                \n                original_time_cost = transition_time_ab + transition_time_bc\n                new_time_cost = transition_time_ac + transition_time_cb\n                \n                delta = new_time_cost - original_time_cost\n                \n                # Check for an improvement\n                if delta < best_delta:\n                    new_schedule = schedule[:]\n                    new_schedule[i + 1:j + 1] = reversed(new_schedule[i + 1:j + 1])\n                    \n                    if validation_single_production_schedule(line_id, new_schedule):\n                        best_delta = delta\n                        best_pair = (i + 1, j)\n                        best_line_id = line_id\n    \n    # If an improvement has been found, create and return the corresponding ReverseSegmentOperator\n    if best_pair:\n        return ReverseSegmentOperator(best_line_id, [(best_pair[0], best_pair[1])]), {}\n    else:\n        # No improvement found, return an empty operator\n        return None, {}\n\nBefore we solve the actual problem, we hope to select useful algorithms and classify them so that we can use different algorithms in different scenarios. \nWe hope to classify algorithms and use different algorithms in different scenarios. \nPlease note:\n1. We only hope to sort useful and powerful heuristic, some heuristic are not powerful, such pure random heuristic;\n2. One heuristic can belong to multiple classification;\n3. Detailed classification is welcome.\n\nThe response format is very important. For better communication, please respond to me in this format:\n***heuristic_classification:\nclassification1:heuristic_name_1,heuristic_name_2,...;reason\nclassification2:heuristic_name_3,heuristic_name_4,...;reason\n....\n***\nEnsure there is no other content inside the ***, and analysis outside *** are welcome.\nIf you have no information to provide, simply respond with ***None***."
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "type": "text",
                "text": "***heuristic_classification:\ndeadline_based:greedy_by_order_density_de77,least_order_remaining_27ca,greedy_deadline_proximity_ac6e,farthest_deadline_insertion_7e8a;These heuristics prioritize orders based on their deadlines, aiming to fulfill as many orders as possible before their deadlines.\nproduction_time_optimization:shortest_operation_ae31,shortest_order_next_25bd,longest_order_next_c9cb;These heuristics focus on optimizing the production time by either selecting orders with the shortest or longest processing times to improve scheduling efficiency.\norder_feasibility:maximum_remaining_work_order_ec9c,greedy_order_selection_2882;These heuristics aim to select orders based on their feasibility to be completed given the current production schedule, often considering remaining work or other feasibility criteria.\nsequence_optimization:_2opt_production_sequence_8e5e,exchange_production_orders_eda2;These heuristics attempt to optimize the sequence of orders on production lines, often inspired by the 2-opt approach, to improve overall efficiency and reduce transition times.\norder_shifting_and_relocation:order_shift_between_lines_bd0c,nearest_order_scheduling_1a5e;These heuristics attempt to improve the schedule by shifting or relocating orders between production lines, optimizing based on machine capabilities and transition rules.\n***\n\nThe classifications focus on the primary strategies or criteria each heuristic uses to improve the scheduling solution."
            }
        ]
    }
]