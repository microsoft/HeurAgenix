[
    {
        "role": "user",
        "content": [
            {
                "type": "text",
                "text": "I am working on Hyper-heuristics for Combinatorial Operation (CO) problem.\nIn this conversation, I will introduce the problem and then framework we have built now, you just remember this.\nIn next conversation, I will describe the challenges I'm encountering and explore how we can collaborate to resolve them.\n\nCurrently, I am working on max_cut problem:\nMaxCut is a classical combinatorial optimization problem where the goal is to partition the vertices of a graph into two disjoint subsets such that the number (or total weight) of edges between the two sets is maximized.\n\nTo support different heuristic algorithms, I build the Solution and Operator framework.\nThe Solution is designed as:\nclass Solution:\n    \"\"\"The solution for the MaxCut problem.\nTwo sets of vertices representing the partition of the graph into two subsets.\"\"\"\n    def __init__(self, set_a: set[int], set_b: set[int]):\n        self.set_a = set_a\n        self.set_b = set_b\nOperator servers as a mechanism to modify solution, which enables the application of heuristic algorithms.\u00a0\nTo support heuristic algorithm, we have build the following operators:\nclass InsertNodeOperator(BaseOperator):\n    \"\"\"Insert a node into one of the sets for the MaxCut solution.\"\"\"\n    def __init__(self, node: int, target_set: str):\n        self.node = node\n        self.target_set = target_set\n        assert target_set in ['A', 'B']\n    def run(self, solution: Solution) -> Solution:\n        new_set_a = set(solution.set_a)\n        new_set_b = set(solution.set_b)\n        if self.target_set == 'A':\n            assert self.node not in solution.set_b\n            new_set_a.add(self.node)\n        elif self.target_set == 'B':\n            assert self.node not in solution.set_a\n            new_set_b.add(self.node)\n        return Solution(new_set_a, new_set_b)\nclass InsertEdgeOperator(BaseOperator):\n    \"\"\"Insert an edge into the MaxCut solution with node_1 in set A and node_2 in set B.\"\"\"\n    def __init__(self, node_1: int, node_2: int):\n        self.node_1 = node_1\n        self.node_2 = node_2\n    def run(self, solution: Solution) -> Solution:\n        new_set_a = set(solution.set_a)\n        new_set_b = set(solution.set_b)\n        assert self.node_1 not in solution.set_b\n        assert self.node_2 not in solution.set_a\n        new_set_a.add(self.node_1)\n        new_set_b.add(self.node_2)\n        return Solution(new_set_a, new_set_b)\nclass SwapOperator(BaseOperator):\n    \"\"\"Swap a list of nodes from origin set to the opposite set in the MaxCut solution.\"\"\"\n    def __init__(self, nodes: list[int]):\n        self.nodes = nodes\n    def run(self, solution: Solution) -> Solution:\n        new_set_a = set(solution.set_a)\n        new_set_b = set(solution.set_b)\n        for node in self.nodes:\n            if node in solution.set_a:\n                assert node not in solution.set_b\n                new_set_a.remove(node)\n                new_set_b.add(node)\n            elif node in solution.set_b:\n                assert node not in solution.set_a\n                new_set_b.remove(node)\n                new_set_a.add(node)\n        return Solution(new_set_a, new_set_b)\nclass DeleteOperator(BaseOperator):\n    \"\"\"Delete a node from both sets in the MaxCut solution.\"\"\"\n    def __init__(self, node: int):\n        self.node = node\n    def run(self, solution: Solution) -> Solution:\n        new_set_a = set(solution.set_a)\n        new_set_b = set(solution.set_b)\n        if self.node in solution.set_a:\n            new_set_a.remove(self.node)\n        elif self.node in solution.set_b:\n            new_set_b.remove(self.node)\n        return Solution(new_set_a, new_set_b)\n\nIn pursuit of augmenting our heuristic algorithmic suite, we require the following standardized heuristic function signature:\ndef heuristic(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: call, **kwargs) -> tuple[TargetOperatorType, dict]:\nThe inputs are:\nglobal_data (dict): The global data dict containing the global instance data with:\n    - \"node_num\" (int): The total number of vertices in the graph.\n    - \"weight_matrix\" (numpy.ndarray): A 2D array representing the weight between nodes.\nstate_data (dict): The state data dict containing the solution state data with:\n    - \"current_solution\" (Solution): An instance of the Solution class representing the current solution.\n    - \"set_a_count\" (int): The number of nodes in set A of the current partition.\n    - \"set_b_count\" (int): The number of nodes in set B of the current partition.\n    - \"selected_nodes\" (set[int]): The set of selected nodes.\n    - \"selected_num\" (int): The number of nodes have been selected.\n    - \"unselected_nodes\" (set[int]): The set of unselected nodes.\n    - \"unselected_num\" (int): The number of nodes have not been selected.\n    - \"current_cut_value\" (int or float): The total weight of edges between set A and set B in the current solution.\n    - \"validation_solution\" (callable): def validation_solution(solution: Solution) -> bool: function to check whether new solution is valid.\nalgorithm_data(dict): Algorithm data contains the data that necessary for some algorithms.\nget_state_data_function(callable): The get_state_data_function is the function that receives the new solution as input and return the state dictionary for new solution. It will not modify the origin solution.\nOther hyper-parameters in kwargs.\nThe outputs includes the operator that must be an instance of a predefined target operator type and updated algorithm dict, which contains new information for future work for both this or other algorithm.\n\nPlease consider is max_cut a combinatorial operation problem and can be solved by heuristics?\nIf you think this problem is not a combinatorial operation problem or the solution, operator, data are incorrect, response ***is_cop:no*** to me, or response ***is_cop:yes***.\n\nThe response format is very important. For better communication, please respond to me in this format:\n***is_cop:yes/no***\nEnsure there is no other content inside the ***, and analysis outside *** are welcome.\nIf you have no information to provide, simply respond with ***None***."
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "type": "text",
                "text": "***is_cop:yes***\n\nMaxCut is indeed a combinatorial optimization problem, which can be effectively approached using heuristic methods. The framework you've described, with its solution representation and operators, seems suitable for implementing various heuristic algorithms to tackle the MaxCut problem."
            }
        ]
    },
    {
        "role": "user",
        "content": [
            {
                "type": "text",
                "text": "We have already implement the following heuristics.\nThese are the heuristics inb format: heuristic_name(parameter=default_value, ..): introduction\nfrom src.problems.max_cut.components import *\nimport numpy as np\n\ndef highest_weight_edge_ca02(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertNodeOperator, dict]:\n    \"\"\" Heuristic algorithm to maximize cut value by evaluating the impact of placing each unselected node into set A or B.\n\n    Args:\n        global_data (dict): The global data dict containing the global data. In this algorithm, the following items are necessary:\n            - \"weight_matrix\" (numpy.ndarray): A 2D array representing the weight between nodes.\n        state_data (dict): The state dictionary containing the current state information. In this algorithm, the following items are necessary:\n            - \"current_solution\" (Solution): The current solution of the MaxCut problem.\n            - \"unselected_nodes\" (set[int]): The set of unselected nodes.\n            - \"set_a\" (set[int]): The set of nodes in partition A.\n            - \"set_b\" (set[int]): The set of nodes in partition B.\n        algorithm_data (dict): Not used in this algorithm.\n        get_state_data_function (callable): Not used in this algorithm.\n\n    Kwargs:\n        k (int, optional): Frequency of applying swap operations. Default is 3.\n\n    Returns:\n        InsertNodeOperator: An operator that places an unselected node into one of the sets (A or B) to maximize the cut value.\n        dict: Empty dictionary as no algorithm data is updated.\n    \"\"\"\n    # Extract necessary information\n    weight_matrix = global_data[\"weight_matrix\"]\n    current_solution = state_data[\"current_solution\"]\n    unselected_nodes = state_data[\"unselected_nodes\"]\n    set_a = state_data[\"current_solution\"].set_a\n    set_b = state_data[\"current_solution\"].set_b\n    k = kwargs.get(\"k\", 3)  # Frequency of swap operations, default is 3\n    \n    # If there are no unselected nodes, return None\n    if not unselected_nodes:\n        return None, {}\n\n    # Initialize variables for the best node and its placement\n    best_node = None\n    best_target_set = None\n    max_delta = float('-inf')\n\n    # Evaluate each unselected node\n    for node in unselected_nodes:\n        # Calculate delta for placing the node in set A\n        delta_a = sum(weight_matrix[node][other] for other in set_b) - sum(weight_matrix[node][other] for other in set_a)\n\n        # Calculate delta for placing the node in set B\n        delta_b = sum(weight_matrix[node][other] for other in set_a) - sum(weight_matrix[node][other] for other in set_b)\n\n        # Determine the best placement for the current node\n        if delta_b > delta_a and delta_b > max_delta:\n            best_node = node\n            best_target_set = 'B'\n            max_delta = delta_b\n        elif delta_a >= delta_b and delta_a > max_delta:\n            best_node = node\n            best_target_set = 'A'\n            max_delta = delta_a\n\n    # If no valid node is found, return None\n    if best_node is None:\n        return None, {}\n\n    # Perform swap operation periodically (every k operations)\n    if len(set_a) + len(set_b) % k == 0:\n        best_swap_delta = float('-inf')\n        best_swap_pair = None\n\n        # Precompute weights to sets\n        weight_to_a = weight_matrix[:, list(set_a)].sum(axis=1)\n        weight_to_b = weight_matrix[:, list(set_b)].sum(axis=1)\n\n        # Evaluate all possible swaps\n        for i in set_a:\n            for j in set_b:\n                # Calculate delta for swapping nodes i and j\n                delta = weight_to_a[i] - weight_to_a[j] + weight_to_b[j] - weight_to_b[i]\n                if weight_matrix[i, j] != 0:\n                    delta += 2 * weight_matrix[i, j]\n\n                # Check if the swap improves the cut value\n                if delta > best_swap_delta:\n                    best_swap_delta = delta\n                    best_swap_pair = (i, j)\n\n        # If a beneficial swap is found, execute it\n        if best_swap_pair and best_swap_delta > 0:\n            i, j = best_swap_pair\n            return SwapOperator(nodes=[i, j]), {}\n\n    # Return the best node insertion operator\n    return InsertNodeOperator(node=best_node, target_set=best_target_set), {}\nfrom src.problems.max_cut.components import Solution, InsertNodeOperator, SwapOperator\nimport numpy as np\n\ndef most_weight_neighbors_d31b(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, scaling_factor: float = 0.5, swap_frequency: int = 5, **kwargs) -> tuple[InsertNodeOperator, dict]:\n    \"\"\"The most_weight_neighbors_d31b heuristic selects an unselected node based on both immediate and future impacts \n    on the cut value and periodically considers swaps to further improve the solution.\n\n    Args:\n        global_data (dict): The global data dict containing the following items:\n            - \"weight_matrix\" (numpy.ndarray): A 2D array representing the weight between nodes.\n        state_data (dict): The state dictionary containing the current state information:\n            - \"current_solution\" (Solution): The current partition of the graph into sets A and B.\n            - \"unselected_nodes\" (set[int]): The set of nodes that have not yet been selected.\n            - \"current_cut_value\" (float): The current cut value of the solution.\n        algorithm_data (dict): The algorithm dictionary for the current algorithm only. In this algorithm, the following items are necessary:\n            - \"sorted_nodes\" (list of tuples): A sorted list of (node, future_impact) in descending order.\n            - \"operation_count\" (int): The number of operations performed so far.\n        get_state_data_function (callable): The function receives the new solution as input and returns the state dictionary for the new solution. It does not modify the original solution.\n        scaling_factor (float, optional): A hyperparameter to scale the future impact of nodes. Defaults to 0.5.\n        swap_frequency (int, optional): Frequency (in terms of operations) at which swap operations are considered. Defaults to 5.\n\n    Returns:\n        InsertNodeOperator or SwapOperator: The operator to modify the solution.\n        dict: Updated algorithm data with the sorted list of nodes and operation count.\n    \"\"\"\n\n    # Extract necessary data\n    weight_matrix = global_data[\"weight_matrix\"]\n    current_solution = state_data[\"current_solution\"]\n    unselected_nodes = state_data[\"unselected_nodes\"]\n    set_a, set_b = current_solution.set_a, current_solution.set_b\n    operation_count = algorithm_data.get(\"operation_count\", 0)\n\n    # Step 1: Perform a swap operation periodically\n    if operation_count % swap_frequency == 0 and set_a and set_b:\n        weight_to_a = weight_matrix[:, list(set_a)].sum(axis=1)\n        weight_to_b = weight_matrix[:, list(set_b)].sum(axis=1)\n        best_increase = float(\"-inf\")\n        best_pair = None\n\n        # Evaluate all possible swaps\n        for i in set_a:\n            for j in set_b:\n                delta = weight_to_a[i] - weight_to_a[j] + weight_to_b[j] - weight_to_b[i]\n                if weight_matrix[i, j] != 0:  # Adjust for the edge between i and j if it exists\n                    delta += 2 * weight_matrix[i, j]\n                if delta > best_increase:\n                    best_increase = delta\n                    best_pair = (i, j)\n\n        # If a beneficial swap is found, return the SwapOperator\n        if best_pair:\n            return SwapOperator(nodes=list(best_pair)), {\"operation_count\": operation_count + 1}\n\n    # Step 2: Sort unselected nodes based on future impact if not already sorted\n    if \"sorted_nodes\" not in algorithm_data or not algorithm_data[\"sorted_nodes\"]:\n        # Calculate the future impact for each unselected node\n        sorted_nodes = sorted(\n            [(node, sum(abs(weight_matrix[node][other]) for other in range(len(weight_matrix)))) for node in unselected_nodes],\n            key=lambda x: x[1],\n            reverse=True\n        )\n        algorithm_data[\"sorted_nodes\"] = sorted_nodes\n    else:\n        # Filter out nodes that have been selected since the last run\n        sorted_nodes = [\n            (node, future_impact) for (node, future_impact) in algorithm_data[\"sorted_nodes\"]\n            if node in unselected_nodes\n        ]\n\n    # Step 3: Select the best unselected node based on both immediate and future impacts\n    if not sorted_nodes:\n        return None, {}\n\n    # Extract the best node and its future impact\n    best_node, future_impact = sorted_nodes.pop(0)\n\n    # Calculate the potential increase in cut value for adding the node to each set\n    potential_increase_a = sum(weight_matrix[best_node][other] for other in set_b)\n    potential_increase_b = sum(weight_matrix[best_node][other] for other in set_a)\n\n    # Adjust the potential increases by adding the scaled future impact\n    adjusted_increase_a = potential_increase_a + scaling_factor * future_impact\n    adjusted_increase_b = potential_increase_b + scaling_factor * future_impact\n\n    # Choose the set that gives the maximum adjusted increase in cut value\n    target_set = \"A\" if adjusted_increase_a >= adjusted_increase_b else \"B\"\n\n    # Create the operator to insert the selected node into the chosen set\n    operator = InsertNodeOperator(best_node, target_set)\n\n    # Return the operator and the updated algorithm data\n    return operator, {\"sorted_nodes\": sorted_nodes, \"operation_count\": operation_count + 1}\nfrom src.problems.max_cut.components import Solution, InsertNodeOperator, SwapOperator\nimport numpy as np\n\ndef balanced_cut_c0e6(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertNodeOperator, dict]:\n    \"\"\"Balanced Cut heuristic for the Max Cut problem with improvements to ensure balanced partitions, \n    future impact consideration, and periodic swap operations.\n\n    Args:\n        global_data (dict): The global data dict containing the following items:\n            - weight_matrix (numpy.ndarray): A 2D array representing the weight between nodes.\n        state_data (dict): The state dictionary containing the current state information:\n            - current_solution (Solution): The current partition of the graph into sets A and B.\n            - unselected_nodes (set[int]): The set of nodes that have not yet been selected.\n            - set_a (set[int]): The set of nodes in partition A.\n            - set_b (set[int]): The set of nodes in partition B.\n            - current_cut_value (float): The current cut value of the solution.\n        algorithm_data (dict): The algorithm dictionary for the current algorithm only. In this algorithm, the following items are necessary:\n            - operation_count (int): The number of operations performed so far. Default is 0.\n            - sorted_nodes (list of tuples): A sorted list of (node, future_impact) in descending order. Default is empty.\n        get_state_data_function (callable): The function receives the new solution as input and returns the state dictionary for the new solution. It does not modify the original solution.\n        kwargs (dict): Hyperparameters for the heuristic:\n            - scaling_factor (float, optional): A hyperparameter to scale the future impact of nodes. Defaults to 0.5.\n            - swap_frequency (int, optional): Frequency (in terms of operations) at which swap operations are considered. Defaults to 5.\n\n    Returns:\n        InsertNodeOperator or SwapOperator: The operator to modify the solution.\n        dict: Updated algorithm data with the sorted list of nodes and operation count.\n    \"\"\"\n    # Extract necessary data\n    weight_matrix = global_data[\"weight_matrix\"]\n    current_solution = state_data[\"current_solution\"]\n    unselected_nodes = state_data[\"unselected_nodes\"]\n    set_a, set_b = current_solution.set_a, current_solution.set_b\n    operation_count = algorithm_data.get(\"operation_count\", 0)\n    sorted_nodes = algorithm_data.get(\"sorted_nodes\", [])\n\n    # Hyperparameters\n    scaling_factor = kwargs.get(\"scaling_factor\", 0.5)\n    swap_frequency = kwargs.get(\"swap_frequency\", 5)\n\n    # Step 1: Perform a swap operation periodically\n    if operation_count % swap_frequency == 0 and set_a and set_b:\n        weight_to_a = weight_matrix[:, list(set_a)].sum(axis=1)\n        weight_to_b = weight_matrix[:, list(set_b)].sum(axis=1)\n        best_increase = float(\"-inf\")\n        best_pair = None\n\n        # Evaluate all possible swaps\n        for i in set_a:\n            for j in set_b:\n                delta = weight_to_a[i] - weight_to_a[j] + weight_to_b[j] - weight_to_b[i]\n                if weight_matrix[i, j] != 0:  # Adjust for the edge between i and j if it exists\n                    delta += 2 * weight_matrix[i, j]\n                if delta > best_increase:\n                    best_increase = delta\n                    best_pair = (i, j)\n\n        # If a beneficial swap is found, return the SwapOperator\n        if best_pair:\n            return SwapOperator(nodes=list(best_pair)), {\"operation_count\": operation_count + 1}\n\n    # Step 2: Sort unselected nodes based on future impact if not already sorted\n    if not sorted_nodes:\n        # Calculate the future impact for each unselected node\n        sorted_nodes = sorted(\n            [(node, sum(abs(weight_matrix[node][other]) for other in range(len(weight_matrix)))) for node in unselected_nodes],\n            key=lambda x: x[1],\n            reverse=True\n        )\n    else:\n        # Filter out nodes that have been selected since the last run\n        sorted_nodes = [\n            (node, future_impact) for (node, future_impact) in sorted_nodes\n            if node in unselected_nodes\n        ]\n\n    # Step 3: Select the best unselected node based on both immediate and future impacts\n    if not sorted_nodes:\n        return None, {}\n\n    # Extract the best node and its future impact\n    best_node, future_impact = sorted_nodes.pop(0)\n\n    # Calculate the potential increase in cut value for adding the node to each set\n    potential_increase_a = sum(weight_matrix[best_node][other] for other in set_b)\n    potential_increase_b = sum(weight_matrix[best_node][other] for other in set_a)\n\n    # Adjust the potential increases by adding the scaled future impact\n    adjusted_increase_a = potential_increase_a + scaling_factor * future_impact\n    adjusted_increase_b = potential_increase_b + scaling_factor * future_impact\n\n    # Choose the set that gives the maximum adjusted increase in cut value\n    target_set = \"A\" if adjusted_increase_a >= adjusted_increase_b else \"B\"\n\n    # Create the operator to insert the selected node into the chosen set\n    operator = InsertNodeOperator(best_node, target_set)\n\n    # Return the operator and the updated algorithm data\n    return operator, {\"sorted_nodes\": sorted_nodes, \"operation_count\": operation_count + 1}\nfrom src.problems.max_cut.components import *\nimport random\nimport math\n\ndef simulated_annealing_ed14(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[SwapOperator, dict]:\n    \"\"\"\n    Simulated Annealing heuristic for the Max Cut problem. It probabilistically chooses to swap a node from one set to another,\n    potentially accepting worse solutions early on to escape local optima, with the probability of accepting worse solutions\n    decreasing over time.\n\n    Args:\n        global_data (dict): Contains the global data of the graph.\n            - \"total_nodes\" (int): The total number of vertices in the graph.\n        state_data (dict): Contains the current state information.\n            - \"current_solution\" (Solution): The current solution of the Max Cut problem.\n            - \"current_cut_value\" (int or float): The total weight of edges between set A and set B in the current solution.\n        algorithm_data (dict): Contains the data specific to the simulated annealing algorithm.\n            - \"temperature\" (float): The current temperature for the simulated annealing process.\n            - \"cooling_rate\" (float): The rate at which the temperature decreases.\n        get_state_data_function (callable): Function to get the state data for a new solution.\n        **kwargs: Hyperparameters for the algorithm.\n            - \"initial_temperature\" (float): The starting temperature for the annealing process.\n            - \"final_temperature\" (float): The temperature at which the annealing process stops.\n            - \"alpha\" (float): The cooling rate factor.\n\n    Returns:\n        SwapOperator: The operator to swap a node between sets if a valid move is found.\n        dict: Updated algorithm data with the new temperature.\n    \"\"\"\n    # Hyperparameters with default values\n    initial_temperature = kwargs.get('initial_temperature', 100.0)\n    final_temperature = kwargs.get('final_temperature', 0.001)\n    alpha = kwargs.get('alpha', 0.95)\n\n    # Initialize temperature if not present in algorithm_data\n    temperature = algorithm_data.get('temperature', initial_temperature)\n    cooling_rate = algorithm_data.get('cooling_rate', alpha)\n\n    # Current solution and cut value\n    current_solution = state_data['current_solution']\n    current_cut_value = state_data['current_cut_value']\n\n    # If the temperature is already below the final temperature, do not perform any operation\n    if temperature <= final_temperature:\n        return None, {}\n\n    # Select a random node to swap\n    node = random.randint(0, global_data['node_num'] - 1)\n\n    # Create a new solution with the node swapped\n    new_solution = SwapOperator([node]).run(current_solution)\n\n    # Get the state data for the new solution\n    new_state_data = get_state_data_function(new_solution)\n\n    # If the new solution is invalid, return no operation\n    if new_state_data is None:\n        return None, {}\n\n    # Calculate the new cut value\n    new_cut_value = new_state_data['current_cut_value']\n\n    # Calculate the change in cut value\n    delta = new_cut_value - current_cut_value\n\n    # If the new solution is better or equal, accept it\n    if delta >= 0:\n        return SwapOperator([node]), {'temperature': temperature * cooling_rate}\n\n    # If the new solution is worse, accept it with a certain probability\n    acceptance_probability = math.exp(delta / temperature)\n    if random.random() < acceptance_probability:\n        return SwapOperator([node]), {'temperature': temperature * cooling_rate}\n\n    # If the new solution is not accepted, return no operation\n    return None, {'temperature': temperature * cooling_rate}\nfrom src.problems.max_cut.components import Solution, InsertNodeOperator\nimport random\n\ndef random_5c59(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertNodeOperator, dict]:\n    \"\"\"Random node insertion heuristic for Max Cut.\n\n    Args:\n        global_data (dict): Contains the global data about the graph.\n            - \"node_num\" (int): The total number of vertices in the graph.\n            \n        state_data (dict): Contains the current state information.\n            - \"current_solution\" (Solution): The current solution instance.\n            - \"unselected_count\" (int): The number of unselected nodes.\n    \n    Returns:\n        InsertNodeOperator: The operator to insert a node into set A or B.\n        dict: Empty dictionary as no algorithm data is updated.\n    \"\"\"\n    node_num = global_data['node_num']\n    current_solution = state_data['current_solution']\n    unselected_nodes = state_data['unselected_nodes']\n\n    # If there are no unselected nodes left, return None.\n    if not unselected_nodes:\n        return None, {}\n\n    # Randomly choose an unselected node.\n    node_to_insert = random.choice(list(unselected_nodes))\n    \n    # Randomly decide to which set the node will be inserted.\n    target_set = random.choice(['A', 'B'])\n\n    # Create the operator.\n    operator = InsertNodeOperator(node=node_to_insert, target_set=target_set)\n    \n    # Return the operator and an empty algorithm data dictionary.\n    return operator, {}\nfrom src.problems.max_cut.components import *\n\ndef multi_swap_2_dbfe(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[SwapOperator, dict]:\n    \"\"\"\n    This heuristic evaluates all possible pairs of nodes for swapping between set A and set B.\n    It performs the swap that leads to the highest increase in the cut value, considering the combined effect\n    of swapping two nodes simultaneously rather than one at a time. It utilizes numpy operations for efficient computation.\n\n    Args:\n        global_data (dict): The global data dict containing the global data. In this algorithm, the following items are necessary:\n            - \"weight_matrix\" (numpy.ndarray): A 2D array representing the weight between nodes.\n        state_data (dict): The state dictionary containing the current state information. In this algorithm, the following items are necessary:\n            - \"current_solution\" (Solution): The current solution of the Max Cut problem.\n        algorithm_data (dict): Not used in this heuristic.\n        get_state_data_function (callable): Function to get the state data for a new solution.\n\n    Returns:\n        SwapOperator: The operator that swaps a pair of nodes between sets to improve the cut value.\n        dict: Empty dictionary as no algorithm data is updated.\n    \"\"\"\n\n    current_solution = state_data['current_solution']\n    weight_matrix = global_data['weight_matrix']\n    best_increase = 0\n    best_pair = None\n\n    set_a = current_solution.set_a\n    set_b = current_solution.set_b\n\n    # Precompute the sum of weights to and from each node\n    weight_to_a = weight_matrix[:, list(set_a)].sum(axis=1)\n    weight_to_b = weight_matrix[:, list(set_b)].sum(axis=1)\n\n    for i in set_a:\n        for j in set_b:\n            # Calculate the delta in cut value for swapping this pair of nodes\n            delta = weight_to_a[i] - weight_to_a[j] + weight_to_b[j] - weight_to_b[i]\n\n            # Adjust for the weight between i and j if they are connected\n            if weight_matrix[i, j] != 0:\n                delta += 2 * weight_matrix[i, j]\n            # Check if this swap improves the cut value\n            if delta > best_increase:\n                best_increase = delta\n                best_pair = (i, j)\n\n    if best_pair is not None:\n        return SwapOperator(list(best_pair)), {}\n    else:\n        return None, {}\nfrom src.problems.max_cut.components import *\n\ndef highest_delta_edge_9f66(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertEdgeOperator, dict]:\n    \"\"\"Selects the unselected edge that maximizes the increase in cut weight when added to the solution.\n\n    Args:\n        global_data (dict): Contains global information about the graph.\n            - \"weight_matrix\" (numpy.ndarray): A 2D array representing the weight between nodes.\n        state_data (dict): Contains the current state of the solution.\n            - \"current_solution\" (Solution): The current partition of the graph into sets A and B.\n            - \"selected_nodes\" (set[int]): The set of selected nodes.\n\n    Returns:\n        InsertEdgeOperator: Operator to insert the nodes of the edge into the appropriate sets.\n        dict: Empty dictionary as no algorithm data is updated.\n    \"\"\"\n    weight_matrix = global_data[\"weight_matrix\"]\n    current_solution = state_data[\"current_solution\"]\n    selected_nodes = state_data[\"selected_nodes\"]\n    unselected_nodes = state_data[\"unselected_nodes\"]\n\n    best_delta = -float('inf')\n    best_edge = None\n    best_set_a = None\n    best_set_b = None\n\n    if len(unselected_nodes) == 1:\n        return InsertNodeOperator(node=next(iter(unselected_nodes)), target_set='A'), {}\n\n    # Precompute the sum of weights connected to each node for both sets A and B\n    delta_set_a = [sum(weight_matrix[i][other] for other in current_solution.set_a) for i in range(len(weight_matrix))]\n    delta_set_b = [sum(weight_matrix[i][other] for other in current_solution.set_b) for i in range(len(weight_matrix))]\n\n    # Iterate over all pairs of nodes to find the best edge to add to the solution\n    for i in range(len(weight_matrix)):\n        if i in selected_nodes:\n            continue  # Skip if node i is selected\n\n        for j in range(i + 1, len(weight_matrix)):\n            if j in selected_nodes:\n                continue  # Skip if node j is selected\n\n            # Calculate the delta for both possible insertions and choose the best one\n            delta_a_to_b = delta_set_b[i] + delta_set_a[j] + weight_matrix[i][j]\n            delta_b_to_a = delta_set_a[i] + delta_set_b[j] + weight_matrix[i][j]\n\n            if delta_a_to_b > delta_b_to_a:\n                delta = delta_a_to_b\n                set_a = 'A'\n                set_b = 'B'\n            else:\n                delta = delta_b_to_a\n                set_a = 'B'\n                set_b = 'A'\n\n            # Update the best edge if the current delta is greater than the best delta found so far\n            if delta > best_delta:\n                best_delta = delta\n                best_edge = (i, j)\n                best_set_a = set_a\n                best_set_b = set_b\n\n    # If no edge is found, return None\n    if best_edge is None:\n        return None, {}\n\n    # Create the operator to insert the nodes of the best edge into the chosen sets\n    node_1, node_2 = best_edge\n    if best_set_a == 'A':\n        operator = InsertEdgeOperator(node_1=node_1, node_2=node_2)\n    else:\n        operator = InsertEdgeOperator(node_1=node_2, node_2=node_1)\n\n    return operator, {}\nfrom src.problems.max_cut.components import *\n\ndef highest_delta_node_b31b(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertNodeOperator, dict]:\n    \"\"\"\n    This heuristic selects the unselected node that, when added to one of the sets (A or B),\n    would result in the largest increase in the total cut weight. The node is then inserted into\n    that set which maximizes the cut weight.\n\n    Args:\n        global_data (dict): Contains information about the graph.\n            - \"weight_matrix\" (numpy.ndarray): A 2D array representing the weight between nodes.\n        state_data (dict): Contains information about the current state of the solution.\n            - \"current_solution\" (Solution): The current partition of the graph into sets A and B.\n            - \"unselected_count\" (int): The number of nodes not yet selected into either set A or B.\n            - \"unselected_nodes\" (set[int]): The set of unselected nodes.\n        algorithm_data (dict): Not used in this heuristic.\n        get_state_data_function (callable): Function to get state data for a new solution.\n\n    Returns:\n        InsertNodeOperator: The operator to insert the node into the appropriate set.\n        dict: Empty dictionary as this algorithm doesn't update the algorithm data.\n    \"\"\"\n\n    # Extract necessary information from global_data and state_data\n    weight_matrix = global_data[\"weight_matrix\"]\n    current_solution = state_data[\"current_solution\"]\n    unselected_nodes = state_data[\"unselected_nodes\"]\n\n    # Initialize variables to keep track of the best node and delta\n    best_node = None\n    best_delta = -float('inf')\n\n    # Iterate over all unselected nodes to find the one with the highest delta\n    for node in unselected_nodes:\n        delta_a = sum(weight_matrix[node, other] for other in current_solution.set_b)\n        delta_b = sum(weight_matrix[node, other] for other in current_solution.set_a)\n\n        # Check if placing the node in set A or B gives a better delta\n        if delta_a > best_delta or delta_b > best_delta:\n            best_delta = max(delta_a, delta_b)\n            best_node = node\n            target_set = 'A' if delta_a > delta_b else 'B'\n\n    # If no suitable node is found (all nodes are already selected), return None\n    if best_node is None:\n        return None, {}\n\n    # Create the operator to insert the best node into the chosen set\n    operator = InsertNodeOperator(best_node, target_set)\n\n    # Return the operator and an empty dictionary as no algorithm data is updated\n    return operator, {}\nfrom src.problems.max_cut.components import Solution, SwapOperator\n\ndef greedy_swap_5bb5(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[SwapOperator, dict]:\n    \"\"\"\n    Greedy Swap Heuristic for the Max Cut problem.\n    Iteratively evaluates the delta in cut value for all possible single-node swaps between set A and set B,\n    and performs the swap that leads to the highest increase in the cut value.\n    If no swap improves the cut value, no operator is returned.\n\n    Args:\n        global_data (dict): Contains the global data of the graph.\n            - \"weight_matrix\" (numpy.ndarray): A 2D array representing the weight between nodes.\n        state_data (dict): Contains the current state information.\n            - \"current_solution\" (Solution): The current solution of the Max Cut problem.\n            - \"current_cut_value\" (int or float): The total weight of edges between set A and set B in the current solution.\n        algorithm_data (dict): Not used in this heuristic.\n        get_state_data_function (callable): Function to get the state data for a new solution.\n        **kwargs: Additional hyperparameters, not used in this heuristic.\n\n    Returns:\n        SwapOperator: The operator that swaps a single node between sets to improve the cut value.\n        dict: Empty dictionary as no algorithm data is updated.\n    \"\"\"\n    current_solution = state_data['current_solution']\n    weight_matrix = global_data['weight_matrix']\n    best_increase = 0\n    best_node = None\n\n    # Precompute the sum of weights to and from each node to sets A and B\n    weight_to_a = weight_matrix[:, list(current_solution.set_a)].sum(axis=1)\n    weight_to_b = weight_matrix[:, list(current_solution.set_b)].sum(axis=1)\n\n    # Evaluate all possible swaps to find the best one\n    for node in range(len(weight_matrix)):\n        if node in current_solution.set_a:\n            # Calculate the delta in cut value for moving this node from A to B\n            delta = weight_to_a[node] - weight_to_b[node]\n        elif node in current_solution.set_b:\n            # Calculate the delta in cut value for moving this node from B to A\n            delta = weight_to_b[node] - weight_to_a[node]\n        else:\n            continue  # Skip if node is not in either set\n\n        # Check if this swap improves the cut value\n        if delta > best_increase:\n            best_increase = delta\n            best_node = node\n\n    # If a beneficial swap was found, return the corresponding operator\n    if best_node is not None:\n        return SwapOperator([best_node]), {}\n    else:\n        return None, {}\n\nBefore we solve the actual problem, we hope to select useful algorithms and classify them so that we can use different algorithms in different scenarios. \nWe hope to classify algorithms and use different algorithms in different scenarios. \nPlease note:\n1. We only hope to sort useful and powerful heuristic, some heuristic are not powerful, such pure random heuristic;\n2. One heuristic can belong to multiple classification;\n3. Detailed classification is welcome.\n\nThe response format is very important. For better communication, please respond to me in this format:\n***heuristic_classification:\nclassification1:heuristic_name_1,heuristic_name_2,...;reason\nclassification2:heuristic_name_3,heuristic_name_4,...;reason\n....\n***\nEnsure there is no other content inside the ***, and analysis outside *** are welcome.\nIf you have no information to provide, simply respond with ***None***."
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "type": "text",
                "text": "***heuristic_classification:\nNode Insertion:highest_weight_edge_ca02,most_weight_neighbors_d31b,balanced_cut_c0e6,highest_delta_node_b31b;These heuristics focus on inserting nodes into sets to maximize the cut value or balance the partition.\nEdge Insertion:highest_delta_edge_9f66;This heuristic targets inserting edges to increase the cut value.\nSwap-Based:greedy_swap_5bb5,simulated_annealing_ed14,multi_swap_2_dbfe;These heuristics focus on swapping nodes between sets to improve the cut value, sometimes incorporating probabilistic acceptance or multiple swaps.\nBalancing/Partitioning:balanced_cut_c0e6,most_weight_neighbors_d31b;These heuristics consider the balance between the two partitions as a part of their strategy.\nProbabilistic/Metaheuristic:simulated_annealing_ed14;This heuristic uses a probabilistic approach to escape local optima by occasionally accepting worse solutions.\nGreedy:highest_weight_edge_ca02,greedy_swap_5bb5,highest_delta_node_b31b;These heuristics use a greedy approach to select the best immediate action to improve the cut.\n***"
            }
        ]
    }
]