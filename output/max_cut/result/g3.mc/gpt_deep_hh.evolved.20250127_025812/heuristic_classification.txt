user
I am working on Hyper-heuristics for Combinatorial Operation (CO) problem.
In this conversation, I will introduce the problem and then framework we have built now, you just remember this.
In next conversation, I will describe the challenges I'm encountering and explore how we can collaborate to resolve them.

Currently, I am working on max_cut problem:
MaxCut is a classical combinatorial optimization problem where the goal is to partition the vertices of a graph into two disjoint subsets such that the number (or total weight) of edges between the two sets is maximized.

To support different heuristic algorithms, I build the Solution and Operator framework.
The Solution is designed as:
class Solution:
    """The solution for the MaxCut problem.
Two sets of vertices representing the partition of the graph into two subsets."""
    def __init__(self, set_a: set[int], set_b: set[int]):
        self.set_a = set_a
        self.set_b = set_b
Operator servers as a mechanism to modify solution, which enables the application of heuristic algorithms.Â 
To support heuristic algorithm, we have build the following operators:
class InsertNodeOperator(BaseOperator):
    """Insert a node into one of the sets for the MaxCut solution."""
    def __init__(self, node: int, target_set: str):
        self.node = node
        self.target_set = target_set
        assert target_set in ['A', 'B']
    def run(self, solution: Solution) -> Solution:
        new_set_a = set(solution.set_a)
        new_set_b = set(solution.set_b)
        if self.target_set == 'A':
            assert self.node not in solution.set_b
            new_set_a.add(self.node)
        elif self.target_set == 'B':
            assert self.node not in solution.set_a
            new_set_b.add(self.node)
        return Solution(new_set_a, new_set_b)
class InsertEdgeOperator(BaseOperator):
    """Insert an edge into the MaxCut solution with node_1 in set A and node_2 in set B."""
    def __init__(self, node_1: int, node_2: int):
        self.node_1 = node_1
        self.node_2 = node_2
    def run(self, solution: Solution) -> Solution:
        new_set_a = set(solution.set_a)
        new_set_b = set(solution.set_b)
        assert self.node_1 not in solution.set_b
        assert self.node_2 not in solution.set_a
        new_set_a.add(self.node_1)
        new_set_b.add(self.node_2)
        return Solution(new_set_a, new_set_b)
class SwapOperator(BaseOperator):
    """Swap a list of nodes from origin set to the opposite set in the MaxCut solution."""
    def __init__(self, nodes: list[int]):
        self.nodes = nodes
    def run(self, solution: Solution) -> Solution:
        new_set_a = set(solution.set_a)
        new_set_b = set(solution.set_b)
        for node in self.nodes:
            if node in solution.set_a:
                assert node not in solution.set_b
                new_set_a.remove(node)
                new_set_b.add(node)
            elif node in solution.set_b:
                assert node not in solution.set_a
                new_set_b.remove(node)
                new_set_a.add(node)
        return Solution(new_set_a, new_set_b)
class DeleteOperator(BaseOperator):
    """Delete a node from both sets in the MaxCut solution."""
    def __init__(self, node: int):
        self.node = node
    def run(self, solution: Solution) -> Solution:
        new_set_a = set(solution.set_a)
        new_set_b = set(solution.set_b)
        if self.node in solution.set_a:
            new_set_a.remove(self.node)
        elif self.node in solution.set_b:
            new_set_b.remove(self.node)
        return Solution(new_set_a, new_set_b)

In pursuit of augmenting our heuristic algorithmic suite, we require the following standardized heuristic function signature:
def heuristic(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: call, **kwargs) -> tuple[TargetOperatorType, dict]:
The inputs are:
global_data (dict): The global data dict containing the global instance data with:
    - "node_num" (int): The total number of vertices in the graph.
    - "weight_matrix" (numpy.ndarray): A 2D array representing the weight between nodes.
state_data (dict): The state data dict containing the solution state data with:
    - "current_solution" (Solution): An instance of the Solution class representing the current solution.
    - "set_a_count" (int): The number of nodes in set A of the current partition.
    - "set_b_count" (int): The number of nodes in set B of the current partition.
    - "selected_nodes" (set[int]): The set of selected nodes.
    - "selected_num" (int): The number of nodes have been selected.
    - "unselected_nodes" (set[int]): The set of unselected nodes.
    - "unselected_num" (int): The number of nodes have not been selected.
    - "current_cut_value" (int or float): The total weight of edges between set A and set B in the current solution.
    - "validation_solution" (callable): def validation_solution(solution: Solution) -> bool: function to check whether new solution is valid.
algorithm_data(dict): Algorithm data contains the data that necessary for some algorithms.
get_state_data_function(callable): The get_state_data_function is the function that receives the new solution as input and return the state dictionary for new solution. It will not modify the origin solution.
Other hyper-parameters in kwargs.
The outputs includes the operator that must be an instance of a predefined target operator type and updated algorithm dict, which contains new information for future work for both this or other algorithm.

Please consider is max_cut a combinatorial operation problem and can be solved by heuristics?
If you think this problem is not a combinatorial operation problem or the solution, operator, data are incorrect, response ***is_cop:no*** to me, or response ***is_cop:yes***.

The response format is very important. For better communication, please respond to me in this format:
***is_cop:yes/no***
Ensure there is no other content inside the ***, and analysis outside *** are welcome.
If you have no information to provide, simply respond with ***None***.
------------------------------------------------------------------------------------

assistant
***is_cop:yes***
------------------------------------------------------------------------------------

user
We have already implement the following heuristics.
These are the heuristics inb format: heuristic_name(parameter=default_value, ..): introduction
from src.problems.max_cut.components import Solution, InsertNodeOperator, SwapOperator
import numpy as np

def balanced_cut_c0e6(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertNodeOperator, dict]:
    """Balanced Cut heuristic for the Max Cut problem with improvements to ensure balanced partitions, 
    future impact consideration, and periodic swap operations.

    Args:
        global_data (dict): The global data dict containing the following items:
            - weight_matrix (numpy.ndarray): A 2D array representing the weight between nodes.
        state_data (dict): The state dictionary containing the current state information:
            - current_solution (Solution): The current partition of the graph into sets A and B.
            - unselected_nodes (set[int]): The set of nodes that have not yet been selected.
            - set_a (set[int]): The set of nodes in partition A.
            - set_b (set[int]): The set of nodes in partition B.
            - current_cut_value (float): The current cut value of the solution.
        algorithm_data (dict): The algorithm dictionary for the current algorithm only. In this algorithm, the following items are necessary:
            - operation_count (int): The number of operations performed so far. Default is 0.
            - sorted_nodes (list of tuples): A sorted list of (node, future_impact) in descending order. Default is empty.
        get_state_data_function (callable): The function receives the new solution as input and returns the state dictionary for the new solution. It does not modify the original solution.
        kwargs (dict): Hyperparameters for the heuristic:
            - scaling_factor (float, optional): A hyperparameter to scale the future impact of nodes. Defaults to 0.5.
            - swap_frequency (int, optional): Frequency (in terms of operations) at which swap operations are considered. Defaults to 5.

    Returns:
        InsertNodeOperator or SwapOperator: The operator to modify the solution.
        dict: Updated algorithm data with the sorted list of nodes and operation count.
    """
    # Extract necessary data
    weight_matrix = global_data["weight_matrix"]
    current_solution = state_data["current_solution"]
    unselected_nodes = state_data["unselected_nodes"]
    set_a, set_b = current_solution.set_a, current_solution.set_b
    operation_count = algorithm_data.get("operation_count", 0)
    sorted_nodes = algorithm_data.get("sorted_nodes", [])

    # Hyperparameters
    scaling_factor = kwargs.get("scaling_factor", 0.5)
    swap_frequency = kwargs.get("swap_frequency", 5)

    # Step 1: Perform a swap operation periodically
    if operation_count % swap_frequency == 0 and set_a and set_b:
        weight_to_a = weight_matrix[:, list(set_a)].sum(axis=1)
        weight_to_b = weight_matrix[:, list(set_b)].sum(axis=1)
        best_increase = float("-inf")
        best_pair = None

        # Evaluate all possible swaps
        for i in set_a:
            for j in set_b:
                delta = weight_to_a[i] - weight_to_a[j] + weight_to_b[j] - weight_to_b[i]
                if weight_matrix[i, j] != 0:  # Adjust for the edge between i and j if it exists
                    delta += 2 * weight_matrix[i, j]
                if delta > best_increase:
                    best_increase = delta
                    best_pair = (i, j)

        # If a beneficial swap is found, return the SwapOperator
        if best_pair:
            return SwapOperator(nodes=list(best_pair)), {"operation_count": operation_count + 1}

    # Step 2: Sort unselected nodes based on future impact if not already sorted
    if not sorted_nodes:
        # Calculate the future impact for each unselected node
        sorted_nodes = sorted(
            [(node, sum(abs(weight_matrix[node][other]) for other in range(len(weight_matrix)))) for node in unselected_nodes],
            key=lambda x: x[1],
            reverse=True
        )
    else:
        # Filter out nodes that have been selected since the last run
        sorted_nodes = [
            (node, future_impact) for (node, future_impact) in sorted_nodes
            if node in unselected_nodes
        ]

    # Step 3: Select the best unselected node based on both immediate and future impacts
    if not sorted_nodes:
        return None, {}

    # Extract the best node and its future impact
    best_node, future_impact = sorted_nodes.pop(0)

    # Calculate the potential increase in cut value for adding the node to each set
    potential_increase_a = sum(weight_matrix[best_node][other] for other in set_b)
    potential_increase_b = sum(weight_matrix[best_node][other] for other in set_a)

    # Adjust the potential increases by adding the scaled future impact
    adjusted_increase_a = potential_increase_a + scaling_factor * future_impact
    adjusted_increase_b = potential_increase_b + scaling_factor * future_impact

    # Choose the set that gives the maximum adjusted increase in cut value
    target_set = "A" if adjusted_increase_a >= adjusted_increase_b else "B"

    # Create the operator to insert the selected node into the chosen set
    operator = InsertNodeOperator(best_node, target_set)

    # Return the operator and the updated algorithm data
    return operator, {"sorted_nodes": sorted_nodes, "operation_count": operation_count + 1}
from src.problems.max_cut.components import *
import numpy as np

def highest_weight_edge_ca02(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertNodeOperator, dict]:
    """ Heuristic algorithm to maximize cut value by evaluating the impact of placing each unselected node into set A or B.

    Args:
        global_data (dict): The global data dict containing the global data. In this algorithm, the following items are necessary:
            - "weight_matrix" (numpy.ndarray): A 2D array representing the weight between nodes.
        state_data (dict): The state dictionary containing the current state information. In this algorithm, the following items are necessary:
            - "current_solution" (Solution): The current solution of the MaxCut problem.
            - "unselected_nodes" (set[int]): The set of unselected nodes.
            - "set_a" (set[int]): The set of nodes in partition A.
            - "set_b" (set[int]): The set of nodes in partition B.
        algorithm_data (dict): Not used in this algorithm.
        get_state_data_function (callable): Not used in this algorithm.

    Kwargs:
        k (int, optional): Frequency of applying swap operations. Default is 3.

    Returns:
        InsertNodeOperator: An operator that places an unselected node into one of the sets (A or B) to maximize the cut value.
        dict: Empty dictionary as no algorithm data is updated.
    """
    # Extract necessary information
    weight_matrix = global_data["weight_matrix"]
    current_solution = state_data["current_solution"]
    unselected_nodes = state_data["unselected_nodes"]
    set_a = state_data["current_solution"].set_a
    set_b = state_data["current_solution"].set_b
    k = kwargs.get("k", 3)  # Frequency of swap operations, default is 3
    
    # If there are no unselected nodes, return None
    if not unselected_nodes:
        return None, {}

    # Initialize variables for the best node and its placement
    best_node = None
    best_target_set = None
    max_delta = float('-inf')

    # Evaluate each unselected node
    for node in unselected_nodes:
        # Calculate delta for placing the node in set A
        delta_a = sum(weight_matrix[node][other] for other in set_b) - sum(weight_matrix[node][other] for other in set_a)

        # Calculate delta for placing the node in set B
        delta_b = sum(weight_matrix[node][other] for other in set_a) - sum(weight_matrix[node][other] for other in set_b)

        # Determine the best placement for the current node
        if delta_b > delta_a and delta_b > max_delta:
            best_node = node
            best_target_set = 'B'
            max_delta = delta_b
        elif delta_a >= delta_b and delta_a > max_delta:
            best_node = node
            best_target_set = 'A'
            max_delta = delta_a

    # If no valid node is found, return None
    if best_node is None:
        return None, {}

    # Perform swap operation periodically (every k operations)
    if len(set_a) + len(set_b) % k == 0:
        best_swap_delta = float('-inf')
        best_swap_pair = None

        # Precompute weights to sets
        weight_to_a = weight_matrix[:, list(set_a)].sum(axis=1)
        weight_to_b = weight_matrix[:, list(set_b)].sum(axis=1)

        # Evaluate all possible swaps
        for i in set_a:
            for j in set_b:
                # Calculate delta for swapping nodes i and j
                delta = weight_to_a[i] - weight_to_a[j] + weight_to_b[j] - weight_to_b[i]
                if weight_matrix[i, j] != 0:
                    delta += 2 * weight_matrix[i, j]

                # Check if the swap improves the cut value
                if delta > best_swap_delta:
                    best_swap_delta = delta
                    best_swap_pair = (i, j)

        # If a beneficial swap is found, execute it
        if best_swap_pair and best_swap_delta > 0:
            i, j = best_swap_pair
            return SwapOperator(nodes=[i, j]), {}

    # Return the best node insertion operator
    return InsertNodeOperator(node=best_node, target_set=best_target_set), {}
from src.problems.max_cut.components import Solution, InsertNodeOperator, SwapOperator
import numpy as np

def most_weight_neighbors_d31b(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, scaling_factor: float = 0.5, swap_frequency: int = 5, **kwargs) -> tuple[InsertNodeOperator, dict]:
    """The most_weight_neighbors_d31b heuristic selects an unselected node based on both immediate and future impacts 
    on the cut value and periodically considers swaps to further improve the solution.

    Args:
        global_data (dict): The global data dict containing the following items:
            - "weight_matrix" (numpy.ndarray): A 2D array representing the weight between nodes.
        state_data (dict): The state dictionary containing the current state information:
            - "current_solution" (Solution): The current partition of the graph into sets A and B.
            - "unselected_nodes" (set[int]): The set of nodes that have not yet been selected.
            - "current_cut_value" (float): The current cut value of the solution.
        algorithm_data (dict): The algorithm dictionary for the current algorithm only. In this algorithm, the following items are necessary:
            - "sorted_nodes" (list of tuples): A sorted list of (node, future_impact) in descending order.
            - "operation_count" (int): The number of operations performed so far.
        get_state_data_function (callable): The function receives the new solution as input and returns the state dictionary for the new solution. It does not modify the original solution.
        scaling_factor (float, optional): A hyperparameter to scale the future impact of nodes. Defaults to 0.5.
        swap_frequency (int, optional): Frequency (in terms of operations) at which swap operations are considered. Defaults to 5.

    Returns:
        InsertNodeOperator or SwapOperator: The operator to modify the solution.
        dict: Updated algorithm data with the sorted list of nodes and operation count.
    """

    # Extract necessary data
    weight_matrix = global_data["weight_matrix"]
    current_solution = state_data["current_solution"]
    unselected_nodes = state_data["unselected_nodes"]
    set_a, set_b = current_solution.set_a, current_solution.set_b
    operation_count = algorithm_data.get("operation_count", 0)

    # Step 1: Perform a swap operation periodically
    if operation_count % swap_frequency == 0 and set_a and set_b:
        weight_to_a = weight_matrix[:, list(set_a)].sum(axis=1)
        weight_to_b = weight_matrix[:, list(set_b)].sum(axis=1)
        best_increase = float("-inf")
        best_pair = None

        # Evaluate all possible swaps
        for i in set_a:
            for j in set_b:
                delta = weight_to_a[i] - weight_to_a[j] + weight_to_b[j] - weight_to_b[i]
                if weight_matrix[i, j] != 0:  # Adjust for the edge between i and j if it exists
                    delta += 2 * weight_matrix[i, j]
                if delta > best_increase:
                    best_increase = delta
                    best_pair = (i, j)

        # If a beneficial swap is found, return the SwapOperator
        if best_pair:
            return SwapOperator(nodes=list(best_pair)), {"operation_count": operation_count + 1}

    # Step 2: Sort unselected nodes based on future impact if not already sorted
    if "sorted_nodes" not in algorithm_data or not algorithm_data["sorted_nodes"]:
        # Calculate the future impact for each unselected node
        sorted_nodes = sorted(
            [(node, sum(abs(weight_matrix[node][other]) for other in range(len(weight_matrix)))) for node in unselected_nodes],
            key=lambda x: x[1],
            reverse=True
        )
        algorithm_data["sorted_nodes"] = sorted_nodes
    else:
        # Filter out nodes that have been selected since the last run
        sorted_nodes = [
            (node, future_impact) for (node, future_impact) in algorithm_data["sorted_nodes"]
            if node in unselected_nodes
        ]

    # Step 3: Select the best unselected node based on both immediate and future impacts
    if not sorted_nodes:
        return None, {}

    # Extract the best node and its future impact
    best_node, future_impact = sorted_nodes.pop(0)

    # Calculate the potential increase in cut value for adding the node to each set
    potential_increase_a = sum(weight_matrix[best_node][other] for other in set_b)
    potential_increase_b = sum(weight_matrix[best_node][other] for other in set_a)

    # Adjust the potential increases by adding the scaled future impact
    adjusted_increase_a = potential_increase_a + scaling_factor * future_impact
    adjusted_increase_b = potential_increase_b + scaling_factor * future_impact

    # Choose the set that gives the maximum adjusted increase in cut value
    target_set = "A" if adjusted_increase_a >= adjusted_increase_b else "B"

    # Create the operator to insert the selected node into the chosen set
    operator = InsertNodeOperator(best_node, target_set)

    # Return the operator and the updated algorithm data
    return operator, {"sorted_nodes": sorted_nodes, "operation_count": operation_count + 1}
from src.problems.max_cut.components import Solution, SwapOperator

def greedy_swap_5bb5(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[SwapOperator, dict]:
    """
    Greedy Swap Heuristic for the Max Cut problem.
    Iteratively evaluates the delta in cut value for all possible single-node swaps between set A and set B,
    and performs the swap that leads to the highest increase in the cut value.
    If no swap improves the cut value, no operator is returned.

    Args:
        global_data (dict): Contains the global data of the graph.
            - "weight_matrix" (numpy.ndarray): A 2D array representing the weight between nodes.
        state_data (dict): Contains the current state information.
            - "current_solution" (Solution): The current solution of the Max Cut problem.
            - "current_cut_value" (int or float): The total weight of edges between set A and set B in the current solution.
        algorithm_data (dict): Not used in this heuristic.
        get_state_data_function (callable): Function to get the state data for a new solution.
        **kwargs: Additional hyperparameters, not used in this heuristic.

    Returns:
        SwapOperator: The operator that swaps a single node between sets to improve the cut value.
        dict: Empty dictionary as no algorithm data is updated.
    """
    current_solution = state_data['current_solution']
    weight_matrix = global_data['weight_matrix']
    best_increase = 0
    best_node = None

    # Precompute the sum of weights to and from each node to sets A and B
    weight_to_a = weight_matrix[:, list(current_solution.set_a)].sum(axis=1)
    weight_to_b = weight_matrix[:, list(current_solution.set_b)].sum(axis=1)

    # Evaluate all possible swaps to find the best one
    for node in range(len(weight_matrix)):
        if node in current_solution.set_a:
            # Calculate the delta in cut value for moving this node from A to B
            delta = weight_to_a[node] - weight_to_b[node]
        elif node in current_solution.set_b:
            # Calculate the delta in cut value for moving this node from B to A
            delta = weight_to_b[node] - weight_to_a[node]
        else:
            continue  # Skip if node is not in either set

        # Check if this swap improves the cut value
        if delta > best_increase:
            best_increase = delta
            best_node = node

    # If a beneficial swap was found, return the corresponding operator
    if best_node is not None:
        return SwapOperator([best_node]), {}
    else:
        return None, {}
from src.problems.max_cut.components import *

def highest_delta_edge_9f66(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertEdgeOperator, dict]:
    """Selects the unselected edge that maximizes the increase in cut weight when added to the solution.

    Args:
        global_data (dict): Contains global information about the graph.
            - "weight_matrix" (numpy.ndarray): A 2D array representing the weight between nodes.
        state_data (dict): Contains the current state of the solution.
            - "current_solution" (Solution): The current partition of the graph into sets A and B.
            - "selected_nodes" (set[int]): The set of selected nodes.

    Returns:
        InsertEdgeOperator: Operator to insert the nodes of the edge into the appropriate sets.
        dict: Empty dictionary as no algorithm data is updated.
    """
    weight_matrix = global_data["weight_matrix"]
    current_solution = state_data["current_solution"]
    selected_nodes = state_data["selected_nodes"]
    unselected_nodes = state_data["unselected_nodes"]

    best_delta = -float('inf')
    best_edge = None
    best_set_a = None
    best_set_b = None

    if len(unselected_nodes) == 1:
        return InsertNodeOperator(node=next(iter(unselected_nodes)), target_set='A'), {}

    # Precompute the sum of weights connected to each node for both sets A and B
    delta_set_a = [sum(weight_matrix[i][other] for other in current_solution.set_a) for i in range(len(weight_matrix))]
    delta_set_b = [sum(weight_matrix[i][other] for other in current_solution.set_b) for i in range(len(weight_matrix))]

    # Iterate over all pairs of nodes to find the best edge to add to the solution
    for i in range(len(weight_matrix)):
        if i in selected_nodes:
            continue  # Skip if node i is selected

        for j in range(i + 1, len(weight_matrix)):
            if j in selected_nodes:
                continue  # Skip if node j is selected

            # Calculate the delta for both possible insertions and choose the best one
            delta_a_to_b = delta_set_b[i] + delta_set_a[j] + weight_matrix[i][j]
            delta_b_to_a = delta_set_a[i] + delta_set_b[j] + weight_matrix[i][j]

            if delta_a_to_b > delta_b_to_a:
                delta = delta_a_to_b
                set_a = 'A'
                set_b = 'B'
            else:
                delta = delta_b_to_a
                set_a = 'B'
                set_b = 'A'

            # Update the best edge if the current delta is greater than the best delta found so far
            if delta > best_delta:
                best_delta = delta
                best_edge = (i, j)
                best_set_a = set_a
                best_set_b = set_b

    # If no edge is found, return None
    if best_edge is None:
        return None, {}

    # Create the operator to insert the nodes of the best edge into the chosen sets
    node_1, node_2 = best_edge
    if best_set_a == 'A':
        operator = InsertEdgeOperator(node_1=node_1, node_2=node_2)
    else:
        operator = InsertEdgeOperator(node_1=node_2, node_2=node_1)

    return operator, {}
from src.problems.max_cut.components import *

def highest_delta_node_b31b(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertNodeOperator, dict]:
    """
    This heuristic selects the unselected node that, when added to one of the sets (A or B),
    would result in the largest increase in the total cut weight. The node is then inserted into
    that set which maximizes the cut weight.

    Args:
        global_data (dict): Contains information about the graph.
            - "weight_matrix" (numpy.ndarray): A 2D array representing the weight between nodes.
        state_data (dict): Contains information about the current state of the solution.
            - "current_solution" (Solution): The current partition of the graph into sets A and B.
            - "unselected_count" (int): The number of nodes not yet selected into either set A or B.
            - "unselected_nodes" (set[int]): The set of unselected nodes.
        algorithm_data (dict): Not used in this heuristic.
        get_state_data_function (callable): Function to get state data for a new solution.

    Returns:
        InsertNodeOperator: The operator to insert the node into the appropriate set.
        dict: Empty dictionary as this algorithm doesn't update the algorithm data.
    """

    # Extract necessary information from global_data and state_data
    weight_matrix = global_data["weight_matrix"]
    current_solution = state_data["current_solution"]
    unselected_nodes = state_data["unselected_nodes"]

    # Initialize variables to keep track of the best node and delta
    best_node = None
    best_delta = -float('inf')

    # Iterate over all unselected nodes to find the one with the highest delta
    for node in unselected_nodes:
        delta_a = sum(weight_matrix[node, other] for other in current_solution.set_b)
        delta_b = sum(weight_matrix[node, other] for other in current_solution.set_a)

        # Check if placing the node in set A or B gives a better delta
        if delta_a > best_delta or delta_b > best_delta:
            best_delta = max(delta_a, delta_b)
            best_node = node
            target_set = 'A' if delta_a > delta_b else 'B'

    # If no suitable node is found (all nodes are already selected), return None
    if best_node is None:
        return None, {}

    # Create the operator to insert the best node into the chosen set
    operator = InsertNodeOperator(best_node, target_set)

    # Return the operator and an empty dictionary as no algorithm data is updated
    return operator, {}
from src.problems.max_cut.components import *

def multi_swap_2_dbfe(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[SwapOperator, dict]:
    """
    This heuristic evaluates all possible pairs of nodes for swapping between set A and set B.
    It performs the swap that leads to the highest increase in the cut value, considering the combined effect
    of swapping two nodes simultaneously rather than one at a time. It utilizes numpy operations for efficient computation.

    Args:
        global_data (dict): The global data dict containing the global data. In this algorithm, the following items are necessary:
            - "weight_matrix" (numpy.ndarray): A 2D array representing the weight between nodes.
        state_data (dict): The state dictionary containing the current state information. In this algorithm, the following items are necessary:
            - "current_solution" (Solution): The current solution of the Max Cut problem.
        algorithm_data (dict): Not used in this heuristic.
        get_state_data_function (callable): Function to get the state data for a new solution.

    Returns:
        SwapOperator: The operator that swaps a pair of nodes between sets to improve the cut value.
        dict: Empty dictionary as no algorithm data is updated.
    """

    current_solution = state_data['current_solution']
    weight_matrix = global_data['weight_matrix']
    best_increase = 0
    best_pair = None

    set_a = current_solution.set_a
    set_b = current_solution.set_b

    # Precompute the sum of weights to and from each node
    weight_to_a = weight_matrix[:, list(set_a)].sum(axis=1)
    weight_to_b = weight_matrix[:, list(set_b)].sum(axis=1)

    for i in set_a:
        for j in set_b:
            # Calculate the delta in cut value for swapping this pair of nodes
            delta = weight_to_a[i] - weight_to_a[j] + weight_to_b[j] - weight_to_b[i]

            # Adjust for the weight between i and j if they are connected
            if weight_matrix[i, j] != 0:
                delta += 2 * weight_matrix[i, j]
            # Check if this swap improves the cut value
            if delta > best_increase:
                best_increase = delta
                best_pair = (i, j)

    if best_pair is not None:
        return SwapOperator(list(best_pair)), {}
    else:
        return None, {}
from src.problems.max_cut.components import Solution, InsertNodeOperator
import random

def random_5c59(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[InsertNodeOperator, dict]:
    """Random node insertion heuristic for Max Cut.

    Args:
        global_data (dict): Contains the global data about the graph.
            - "node_num" (int): The total number of vertices in the graph.
            
        state_data (dict): Contains the current state information.
            - "current_solution" (Solution): The current solution instance.
            - "unselected_count" (int): The number of unselected nodes.
    
    Returns:
        InsertNodeOperator: The operator to insert a node into set A or B.
        dict: Empty dictionary as no algorithm data is updated.
    """
    node_num = global_data['node_num']
    current_solution = state_data['current_solution']
    unselected_nodes = state_data['unselected_nodes']

    # If there are no unselected nodes left, return None.
    if not unselected_nodes:
        return None, {}

    # Randomly choose an unselected node.
    node_to_insert = random.choice(list(unselected_nodes))
    
    # Randomly decide to which set the node will be inserted.
    target_set = random.choice(['A', 'B'])

    # Create the operator.
    operator = InsertNodeOperator(node=node_to_insert, target_set=target_set)
    
    # Return the operator and an empty algorithm data dictionary.
    return operator, {}
from src.problems.max_cut.components import *
import random
import math

def simulated_annealing_ed14(global_data: dict, state_data: dict, algorithm_data: dict, get_state_data_function: callable, **kwargs) -> tuple[SwapOperator, dict]:
    """
    Simulated Annealing heuristic for the Max Cut problem. It probabilistically chooses to swap a node from one set to another,
    potentially accepting worse solutions early on to escape local optima, with the probability of accepting worse solutions
    decreasing over time.

    Args:
        global_data (dict): Contains the global data of the graph.
            - "total_nodes" (int): The total number of vertices in the graph.
        state_data (dict): Contains the current state information.
            - "current_solution" (Solution): The current solution of the Max Cut problem.
            - "current_cut_value" (int or float): The total weight of edges between set A and set B in the current solution.
        algorithm_data (dict): Contains the data specific to the simulated annealing algorithm.
            - "temperature" (float): The current temperature for the simulated annealing process.
            - "cooling_rate" (float): The rate at which the temperature decreases.
        get_state_data_function (callable): Function to get the state data for a new solution.
        **kwargs: Hyperparameters for the algorithm.
            - "initial_temperature" (float): The starting temperature for the annealing process.
            - "final_temperature" (float): The temperature at which the annealing process stops.
            - "alpha" (float): The cooling rate factor.

    Returns:
        SwapOperator: The operator to swap a node between sets if a valid move is found.
        dict: Updated algorithm data with the new temperature.
    """
    # Hyperparameters with default values
    initial_temperature = kwargs.get('initial_temperature', 100.0)
    final_temperature = kwargs.get('final_temperature', 0.001)
    alpha = kwargs.get('alpha', 0.95)

    # Initialize temperature if not present in algorithm_data
    temperature = algorithm_data.get('temperature', initial_temperature)
    cooling_rate = algorithm_data.get('cooling_rate', alpha)

    # Current solution and cut value
    current_solution = state_data['current_solution']
    current_cut_value = state_data['current_cut_value']

    # If the temperature is already below the final temperature, do not perform any operation
    if temperature <= final_temperature:
        return None, {}

    # Select a random node to swap
    node = random.randint(0, global_data['node_num'] - 1)

    # Create a new solution with the node swapped
    new_solution = SwapOperator([node]).run(current_solution)

    # Get the state data for the new solution
    new_state_data = get_state_data_function(new_solution)

    # If the new solution is invalid, return no operation
    if new_state_data is None:
        return None, {}

    # Calculate the new cut value
    new_cut_value = new_state_data['current_cut_value']

    # Calculate the change in cut value
    delta = new_cut_value - current_cut_value

    # If the new solution is better or equal, accept it
    if delta >= 0:
        return SwapOperator([node]), {'temperature': temperature * cooling_rate}

    # If the new solution is worse, accept it with a certain probability
    acceptance_probability = math.exp(delta / temperature)
    if random.random() < acceptance_probability:
        return SwapOperator([node]), {'temperature': temperature * cooling_rate}

    # If the new solution is not accepted, return no operation
    return None, {'temperature': temperature * cooling_rate}

Before we solve the actual problem, we hope to select useful algorithms and classify them so that we can use different algorithms in different scenarios. 
We hope to classify algorithms and use different algorithms in different scenarios. 
Please note:
1. We only hope to sort useful and powerful heuristic, some heuristic are not powerful, such pure random heuristic;
2. One heuristic can belong to multiple classification;
3. Detailed classification is welcome.

The response format is very important. For better communication, please respond to me in this format:
***heuristic_classification:
classification1:heuristic_name_1,heuristic_name_2,...;reason
classification2:heuristic_name_3,heuristic_name_4,...;reason
....
***
Ensure there is no other content inside the ***, and analysis outside *** are welcome.
If you have no information to provide, simply respond with ***None***.
------------------------------------------------------------------------------------

assistant
***heuristic_classification:
Greedy:highest_weight_edge_ca02,highest_delta_node_b31b;These heuristics focus on immediate gain by selecting nodes or edges that maximize the current cut value.
Balance:balanced_cut_c0e6,most_weight_neighbors_d31b;These heuristics aim to maintain or achieve a balanced partition while optimizing the cut value.
Swap-based:greedy_swap_5bb5,multi_swap_2_dbfe;These heuristics focus on swapping nodes between sets to improve the cut value.
Future Impact:balanced_cut_c0e6,most_weight_neighbors_d31b;These heuristics consider both immediate and future impacts of node insertion for more strategic decision-making.
Simulated Annealing:simulated_annealing_ed14;This heuristic uses probabilistic acceptance of worse solutions to escape local optima and explore the solution space.
***
------------------------------------------------------------------------------------

